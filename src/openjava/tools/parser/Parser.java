/* Generated By:JavaCC: Do not edit this line. Parser.java */
package openjava.tools.parser;


import java.io.Reader;
import java.util.Vector;
import java.util.Hashtable;
import java.lang.reflect.Method;
import openjava.mop.*;
import openjava.ptree.*;
import openjava.tools.DebugOut;
import openjava.syntax.SyntaxRule;
import openjava.syntax.TokenSource;


public class Parser implements ParserConstants {
    /**
     * Allocates a new parser object who gets tokens from the given parser
     * object.
     *
     * @param  parser  this is used to get tokens via <code>getToken()</code>
     *                 or <code>getNextToken()</code>.
     */
    public Parser( Parser parser ) {
        this( (ParserTokenManager) new CustomTokenManager( parser, OJSystem.env ) );
    }

    public Parser( TokenSource token_src ) {
        this( new TokenSourceAdapter( token_src ) );
    }

    private final String getComment() {
        Token token = getToken( 1 ).specialToken;
        return ((token == null) ? null : token.image);
    }


    private final static int makeInt( String str ) {
        if (str.length() == 1) {
            return Integer.valueOf( str ).intValue();
        } else if (str.startsWith( "0x" ) || str.startsWith( "0X" )) {
            return Integer.valueOf( str.substring( 2 ), 16 ).intValue();
        } else if (str.startsWith( "0" )) {
            return Integer.valueOf( str.substring( 1 ), 8 ).intValue();
        }
        return Integer.valueOf( str ).intValue();
    }
    private final static long makeLong( String str ) {
        if (str.length() == 1) {
            return Long.valueOf( str ).longValue();
        } else if (str.startsWith( "0x" ) || str.startsWith( "0X" )) {
            str = str.substring( 2 );
            if (str.endsWith( "l" ) || str.endsWith( "L" )) {
                str = str.substring( 0, str.length() - 1 );
            }
            return Long.valueOf( str, 16 ).longValue();
        } else if (str.startsWith( "0" )) {
            str = str.substring( 1 );
            if (str.endsWith( "l" ) || str.endsWith( "L" )) {
                str = str.substring( 0, str.length() - 1 );
            }
            return Long.valueOf( str, 8 ).longValue();
        }
        return Long.valueOf( str ).longValue();
    }

    /**
     * Detects class or interface name and metaclass
     */
    private final ClassEnvironment setClassEnvironment( Environment base_env )
        throws ParseException
    {
        int ptr = 1;
        for (; roughModifierCheck( getToken( ptr ) ) ; ++ptr)  ;
        Token c_or_i = getToken( ptr++ );
        if (c_or_i.kind != CLASS && c_or_i.kind != INTERFACE && c_or_i.kind != ENUM) {
            throw new ParseException( "'class' or 'interface' or 'enum' expected : "
                                     + c_or_i.image );
        }
        Token cname = getToken( ptr++ );
        if (cname.kind != IDENTIFIER) {
            throw new ParseException( "class name expected : "
                                     + c_or_i.image );
        }
        String classname = cname.image;
        //System.out.println("classname: " + classname);
        ClassEnvironment result = new ClassEnvironment(base_env, classname);
        //System.out.println("ClassEnvironment: " + result);
        Token inst = getToken(ptr++);
        if (inst.kind != INSTANTIATES) {
            ptr++;
        } else {
            IntAndObj tmp = consumeMetaclassName(ptr);  ptr = tmp.ptr;
            String meta = base_env.toQualifiedName((String) tmp.obj);
            OJSystem.metabind(result.toQualifiedName(classname), meta);
        }

        return result;
    }
    /**
     * Add a new enumeration type
     */
    private final ClassEnvironment setEnumEnvironment( Environment base_env, String enumName ){
        //System.out.println("ClassEnvironment_enum: enumName: " + enumName);
        ClassEnvironment result = new ClassEnvironment(base_env, enumName);
        //toExecutable(globalFileEnvironment, enumName);
        //System.out.println("ClassEnvironment_enum: " + result);
        return result;
    }

    private IntAndObj consumeMetaclassName( int ptr ) throws ParseException {
        Token token = getToken( ptr++ );
        if (token.kind != IDENTIFIER) {
            throw new ParseException( "metaclass name exptected : "
                                     + token.image );
        }
        StringBuffer buf = new StringBuffer( token.image );
        while (getToken( ptr ).kind == DOT
               && getToken( ptr + 1 ).kind == IDENTIFIER) {
            buf.append( "." ).append( getToken( ptr + 1 ).image );
            ptr += 2;
        }
        return new IntAndObj( ptr, buf.toString() );
    }

        /*
     * This is used to check OpenJava user modifier semantically.
     */
    private final boolean OpenJavaModifierLookahead( Environment env ) {
        return modifierCheck( env, getToken( 1 ) );
    }

    /**
     * This is used to check OpenJava user modifier semantically.
     */
    private final boolean ModifierLookahead( Environment env ) {
        return modifierCheck( env, getToken( 1 ) );
    }

    boolean DeclSuffixLookahead( Environment env ) {
                String typename = env.currentClassName();
                String keyword = consumeKeyword( 1 );
                if (keyword == null)  return false;
                Class meta = toExecutable( env, typename );
                return invokeOJClass_isRegisteredKeyword( meta, keyword );
    }

    boolean TypeSuffixLookahead( Environment env, String typename ) {
                String keyword = consumeKeyword( 1 );
                if (keyword == null)  return false;

                Class meta = toExecutable( env, typename );
                return invokeOJClass_isRegisteredKeyword( meta, keyword );
    }

    private static final boolean modifierCheck( Environment env, Token t ) {
        //System.out.println("modifierCheck: " + t.image);
                if (pureModifierCheck( t ))  return true;
                if (t.kind != IDENTIFIER)  return false;
                //System.out.println("env.currentClassName(): " + env.currentClassName());
                Class meta = toExecutable( env, env.currentClassName() );
                //System.out.println("meta: " + meta);
                if (meta == null)  return false;

                return invokeOJClass_isRegisteredModifier( meta, t.image );
    }

    private static final boolean modifierCheckWithoutEnvParam( Token t ) {
        //System.out.println("modifierCheck: " + t.image);
                if (pureModifierCheck( t ))  return true;
                if (t.kind != IDENTIFIER)  return false;
                Class meta = toExecutable( globalFileEnvironment, globalFileEnvironment.currentClassName() );
                //System.out.println("meta: " + meta);
                if (meta == null)  return false;
                return invokeOJClass_isRegisteredModifier( meta, t.image );
    }

    private String consumeKeyword( int ptr ) {
                Token token = getToken( ptr );
                if (token.kind != IDENTIFIER)  return null;
                return token.image;
    }

    static final Class toExecutable( Environment env, String typename ) {
        //System.out.println("typename: " + typename);
                String qname = env.toQualifiedName( typename );
                //System.out.println("qname: " + qname);
                return OJSystem.getMetabind( qname );
    }

    static boolean invokeOJClass_isRegisteredKeyword( Class meta,
                                                       String keyword )
    {
        try {
            Method m = meta.getMethod( "isRegisteredKeyword",
                                       new Class[]{ String . class} );
            Boolean b = (Boolean) m.invoke( null, new Object[]{ keyword } );
            return b.booleanValue();
        } catch ( Exception e ) {}
        return false;
    }

    static SyntaxRule invokeOJClass_getDeclSuffixRule(Environment env,
                                                      Class meta,
                                                      String keyword)
    {
        SyntaxRule result = null;
        try {
            Method m = meta.getMethod("getDeclSuffixRule",
                                      new Class[]{ Environment.class,
                                                   String.class });
            result = (SyntaxRule) m.invoke(null, new Object[]{ env, keyword });
        } catch (Exception e) {} /* ignore if the method not provided */
        if (result != null)  return result;
        try {
            Method m = meta.getMethod("getDeclSuffixRule",
                                      new Class[]{ String.class });
            result = (SyntaxRule) m.invoke(null, new Object[]{ keyword });
        } catch (Exception e) {} /* ignore if the method not provided */
        return result;
    }

    static SyntaxRule invokeOJClass_getTypeSuffixRule(Environment env,
                                                      Class meta,
                                                      String keyword)
    {
        SyntaxRule result = null;
        try {
            Method m = meta.getMethod("getTypeSuffixRule",
                                      new Class[]{ Environment.class,
                                                   String.class });
            result = (SyntaxRule) m.invoke(null, new Object[]{ env, keyword });
        } catch (Exception e) {} /* ignore if the method not provided */
        if (result != null)  return result;
        try {
            Method m = meta.getMethod("getTypeSuffixRule",
                                      new Class[]{ String.class});
            result = (SyntaxRule) m.invoke(null, new Object[]{ keyword });
        } catch (Exception e) {} /* ignore if the method not provided */
        return result;
    }

    static boolean invokeOJClass_isRegisteredModifier( Class meta,
                                                       String keyword )
    {
        try {
            Method m = meta.getMethod( "isRegisteredModifier",
                                       new Class[]{ String . class} );
            Boolean b = (Boolean) m.invoke( null, new Object[]{ keyword } );
            return b.booleanValue();
        } catch ( Exception e ) {}
        return false;
    }

    /**
     * This is used to check constructors semantically.
     */
    private final boolean ConstructorDeclarationLookahead(
            ClassEnvironment env ) {
        int ptr;
        for (ptr = 1; modifierCheck( env, getToken( ptr ) ) ; ++ptr)  ;
        String simplename = Environment.toSimpleName( env.currentClassName() );
        //if (! getToken( ptr ).image.equals( simplename )
        //    || getToken( ptr + 1 ).kind != LPAREN) {
        //    return false;
        //}
        //return true;
        return (getToken(ptr + 1).kind == LPAREN);
    }

    /**
     * This will used to check local variable declaration semantically.
     */
    private final boolean LocalVariableDeclarationLookahead(
            Environment env ) {
                int ptr;
                /* skip the modifier */
                for (ptr = 1; modifierCheck( env, getToken( ptr ) ) ; ++ptr)  ;
                int old_ptr = ptr;
            //System.out.println("LocalVariableDeclarationLookahead:0 " + getToken(old_ptr));
                ptr = consumePureResultType( old_ptr );
                //System.out.println("LocalVariableDeclarationLookahead:1 " + getToken(ptr));

                if (ptr != old_ptr && getToken( ptr ).kind == IDENTIFIER) {
                    return true;
                }
                return false;
    }

    private final boolean LocalVariableDeclarationLookaheadWithoutEnv()
    {
                int ptr;
                /* skip the modifier */
                for (ptr = 1; modifierCheckWithoutEnvParam( getToken( ptr ) ) ; ++ptr)  ;
                int old_ptr = ptr;

                ptr = consumePureResultType( old_ptr );

                if (ptr != old_ptr && getToken( ptr ).kind == IDENTIFIER) {
                    return true;
                }
                return false;
    }

    private final boolean roughModifierCheck( Token t ) {
        if (pureModifierCheck( t ))  return true;
        return (t.kind == IDENTIFIER);
    }

    private static final boolean pureModifierCheck( Token t ) {
        switch (t.kind) {
        case ABSTRACT  : case FINAL        : case PUBLIC    : case PRIVATE  :
        case PROTECTED : case STATIC       : case TRANSIENT : case VOLATILE :
        case NATIVE    : case SYNCHRONIZED :
            return true;
        }
        return false;
    }

    private final boolean ConstructorInvocationLookahead() {
        int ptr = 1;
        while (getToken(ptr).kind != EOF) {
            if (getToken(ptr).kind == SUPER
                && getToken(ptr + 1).kind == LPAREN) {
                return true;
            }
            if (getToken(ptr).kind == SEMICOLON)  return false;
            if (getToken(ptr).kind == RBRACE)  return false;
            ++ptr;
        }
        return false;
    }

    private final boolean AssignmentLookahead() {
                int ptr = 1;
                switch (getToken( ptr ).kind) {
                case LPAREN :
                    ptr = consumeParenPair( ptr );
                    break;
                case IDENTIFIER :
                case THIS :
                case SUPER :
                    ptr++;
                    break;
                default :
                    return false;
                }
                for (boolean cont = true; cont;) {
                    switch (getToken( ptr ).kind) {
                    case LPAREN :
                        ptr = consumeParenPair( ptr );
                        break;
                    case LBRACKET :
                        ptr = consumeBracketPair( ptr );
                        break;
                    case DOT :
                        ptr++;
                        if (getToken( ptr ).kind != IDENTIFIER)  return false;
                        ptr++;
                        break;
                    default :
                        cont = false;
                    }
        }
        return assignmentOperatorCheck( getToken( ptr ) );
    }

    private final int consumeParenPair( int ptr ) {
        int nest = 1;
        for (++ptr; nest > 0; ptr++) {
            if (getToken( ptr ).kind == LPAREN)  nest++;
            if (getToken( ptr ).kind == RPAREN)  nest--;
        }
        return ptr;
    }

    private final int consumeBracketPair( int ptr ) {
        int nest = 1;
        for (++ptr; nest > 0; ptr++) {
            if (getToken( ptr ).kind == LBRACKET)  nest++;
            if (getToken( ptr ).kind == RBRACKET)  nest--;
        }
        return ptr;
    }

    private static final boolean assignmentOperatorCheck( Token t ) {
                if (t.kind == ASSIGN)  return true;
                if (t.kind == PLUSASSIGN)  return true;
                if (t.kind == MINUSASSIGN)  return true;
                if (t.kind == STARASSIGN)  return true;
                if (t.kind == SLASHASSIGN)  return true;
                if (t.kind == ANDASSIGN)  return true;
                if (t.kind == ORASSIGN)  return true;
                if (t.kind == XORASSIGN)  return true;
                if (t.kind == REMASSIGN)  return true;
                if (t.kind == LSHIFTASSIGN)  return true;
                if (t.kind == RSIGNEDSHIFTASSIGN)  return true;
                if (t.kind == RUNSIGNEDSHIFTASSIGN)  return true;
                return false;
    }

    private final boolean ClassLiteralLookahead() {
        int ptr = 1;
        ptr = consumePureResultType( ptr );
        if (ptr == 1)  return false;
        /** here should be user suffix check **/
        if (getToken( ptr ).kind != DOT)  return false;
        if (getToken( ptr + 1 ).kind != CLASS)  return false;
        return true;
    }

        /**
	  * modified for Java 1.5
	  * analyze the tokens and skip generics <...>
	  */
    private final int consumePureResultType( int ptr ) {
                Token token = getToken( ptr );

                if (primitiveTypeCheck( token )) {
                    ptr++;
                } else if (token.kind == IDENTIFIER) {
                    ptr++;

                    /* skip the generics */

                        int number = 0; //a number to record how many "< >"s are included in the generics
                    if(getToken(ptr).kind == LT){
                                do{
                                    if(getToken(ptr).kind == LT)
                                        number++; // add one to the number if encountering a "<"

                                        ptr++;

                                        if(getToken(ptr).kind == GT)
                                                number--;// subtract one from the number if encountering a " >"
                                }
                                while( (getToken(ptr).kind != GT) && (number != 0));
                                ptr++;
                    }

                    while (getToken( ptr ).kind == DOT
                           && getToken( ptr + 1 ).kind == IDENTIFIER) {
                        ptr += 2;
                    }
                } else {
                    return ptr;
                }

                while (getToken( ptr ).kind == LBRACKET
                       && getToken( ptr + 1 ).kind == RBRACKET) {
                    ptr += 2;
                }

                return ptr;
    }

    private final boolean primitiveTypeCheck( Token t ) {
        if (t.kind == BOOLEAN || t.kind == CHAR || t.kind == BYTE
            || t.kind == SHORT || t.kind == INT || t.kind == LONG
            || t.kind == FLOAT || t.kind == DOUBLE || t.kind == VOID) {
            return true;
        }
        return false;
    }
        public static FileEnvironment globalFileEnvironment = null;

        public String modifierConversion(int modifierInt){
        String result = "";
                switch (modifierInt){
                        case ModifierList.ABSTRACT:     result = "abstract "; break;
                        case ModifierList.FINAL:        result = "final ";    break;
                        case ModifierList.PUBLIC:       result = "public ";   break;
                        case ModifierList.PRIVATE:      result = "private ";  break;
                        case ModifierList.PROTECTED:    result = "protected "; break;
                        case ModifierList.STATIC:       result = "static ";    break;
                        case ModifierList.TRANSIENT:    result = "transient "; break;
                        case ModifierList.VOLATILE:     result = "volatile ";  break;
                        case ModifierList.NATIVE:               result = "native ";    break;
                        case ModifierList.SYNCHRONIZED: result = "synchronized "; break;
                        default:                                                result = "";             break;
                }
        return result;
}

  void debug_message1() throws ParseException {
    DebugOut.println( "debug1 : " + getToken( 0 ).image
                     + " , " + getToken( 1 ).image );
  }

  ParseTree UserDeclSuffix(Environment env, String keyword) throws ParseException {
    String typename = env.currentClassName();
    Class meta = toExecutable(env, typename);
    SyntaxRule rule = invokeOJClass_getDeclSuffixRule(env, meta, keyword);
    CustomTokenManager token_mgr = new CustomTokenManager(this, env);
    token_mgr.assume();
    ParseTree result = rule.consume(token_mgr);
    token_mgr.fix();
    return result;
  }

  ParseTree UserTypeSuffix(Environment env, String typename, String keyword) throws ParseException {
    Class meta = toExecutable(env, typename);
    SyntaxRule rule = invokeOJClass_getTypeSuffixRule(env, meta, keyword);
    CustomTokenManager token_mgr = new CustomTokenManager(this, env);
    token_mgr.assume();
    ParseTree result = rule.consume(token_mgr);
    token_mgr.fix();
    return result;
  }

  void E() throws ParseException {
  }

/*****************************************
 * Syntactical Descriptions              *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public CompilationUnit CompilationUnit(Environment base_env) throws ParseException {
    CompilationUnit result;
    /* FileEnvironment  env = new FileEnvironment( base_env ); */
    globalFileEnvironment = new FileEnvironment( base_env );
    String                              p1;
    String[]                    p2;
    ClassDeclarationList                p3;
    /**/DebugOut.println( "#CompilationUnit()" );
    String comment = getComment();
    p1 = PackageDeclarationOpt();
    p2 = ImportDeclarationListOpt();
            /* System.out.println("global environment: " + globalFileEnvironment); */
                globalFileEnvironment.setPackage( p1 );

                for (int i = 0; i < p2.length; ++i) {
                    if (CompilationUnit.isOnDemandImport( p2[i] )) {
                                String pack_cls = CompilationUnit.trimOnDemand( p2[i] );
                                globalFileEnvironment.importPackage( pack_cls );
                    } else {
                                globalFileEnvironment.importClass( p2[i] );
                    }
                }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        break label_1;
      }
      jj_consume_token(SEMICOLON);
    }
    p3 = TypeDeclarationListOpt(globalFileEnvironment);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 127:
      jj_consume_token(127);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STUFF_TO_IGNORE:
      jj_consume_token(STUFF_TO_IGNORE);
      break;
    default:
      ;
    }
    jj_consume_token(0);
                result = new CompilationUnit( p1, p2, p3 );
                result.setComment( comment );
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String PackageDeclarationOpt() throws ParseException {
    String                      p1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      jj_consume_token(PACKAGE);
      p1 = Name();
      jj_consume_token(SEMICOLON);
      {if (true) return p1;}
      break;
    default:
      E();
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String[] ImportDeclarationListOpt() throws ParseException {
    String[]                    result;
    String                      p1;
    Vector  v = new Vector();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
      label_2:
      while (true) {
        p1 = ImportDeclaration();
                               v.addElement( p1 );
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          break label_2;
        }
      }
        result = new String[v.size()];
        for (int i = 0; i < result.length; ++i) {
            result[i] = (String) v.elementAt( i );
        }
      {if (true) return result;}
      break;
    default:
      E();
      {if (true) return new String[0];}
    }
    throw new Error("Missing return statement in function");
  }

  final public String ImportDeclaration() throws ParseException {
    String               p1;
    StringBuffer strbuf = new StringBuffer();
    jj_consume_token(IMPORT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
                strbuf.append("static ");
      break;
    default:
      ;
    }
    Identifier();
      strbuf.append( getToken( 0 ).image );
    label_3:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(DOT);
      Identifier();
          strbuf.append( "." + getToken( 0 ).image );
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(STAR);
          strbuf.append( ".*" );
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
      {if (true) return strbuf.toString();}
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclarationList TypeDeclarationListOpt(Environment env) throws ParseException {
    ClassEnvironment        newenv;
    ClassDeclarationList        result = new ClassDeclarationList();
    ClassDeclaration            p1 = null;
    int modifier;
    if ((getToken( 1 ).kind != RBRACE
                      && getToken( 1 ).kind != EOF)) {
      label_4:
      while (true) {
        if (jj_2_3(2147483647)) {
          modifier = Modifier();
          AnnotationTypeDeclarationWithoutSematics(modifier);
                                 {if (true) return result;}
        } else if (jj_2_4(2147483647)) {
          Annotation();
          label_5:
          while (true) {
            if (jj_2_2(2147483647)) {
              ;
            } else {
              break label_5;
            }
            Annotation();
          }
                                  newenv = setClassEnvironment( env );
          p1 = TypeDeclaration(newenv);
        } else {
                  newenv = setClassEnvironment( env );
          p1 = TypeDeclaration(newenv);
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            ;
            break;
          default:
            break label_6;
          }
          jj_consume_token(SEMICOLON);
        }
          result.add( p1 );
        if ((getToken( 1 ).kind != RBRACE && getToken( 1 ).kind != EOF)) {
          ;
        } else {
          break label_4;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclaration TypeDeclaration(ClassEnvironment env) throws ParseException {
    ClassDeclaration                    result;
    ClassDeclaration                    p1;
    Token ctoken = getToken( 1 ).specialToken;
    String comment = getComment();
    MemberDeclaration                   md;
    if (jj_2_5(2147483647)) {
      p1 = ClassDeclaration(env);
    } else if (jj_2_6(2147483647)) {
      md = EnumDeclaration(env);
          p1 = new ClassDeclaration(md);
    } else {
      p1 = InterfaceDeclaration(env);
    }
        result = p1;
                result.setComment( comment );
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      {if (true) return getToken( 0 ).image;}
      break;
    case METACLASS:
      jj_consume_token(METACLASS);
      {if (true) return "metaclass";}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String[] MetaclassesOpt(Environment env) throws ParseException {
    String[]                    result;
    String                      p1;
    String                      p2;
    Vector  v = new Vector();
    String  qname;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METACLASS:
      jj_consume_token(METACLASS);
      p1 = Name();
        qname = env.toQualifiedName( p1 );
        v.addElement( qname );
        /****/DebugOut.print( "metaclass " + qname );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        p2 = Name();
            qname = env.toQualifiedName( p2 );
            /****/DebugOut.print( ", " + qname );
        break;
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      /****/DebugOut.println( " :" );
        result = new String[v.size()];
        for (int i = 0; i < result.length; ++i) {
            result[i] = (String) v.elementAt( i );
        }
      {if (true) return result;}
      break;
    default:
      E();
      {if (true) return new String[0];}
    }
    throw new Error("Missing return statement in function");
  }

  final public String InstantiatesPhraseOpt(ClassEnvironment env) throws ParseException {
    String                      p1 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANTIATES:
      jj_consume_token(INSTANTIATES);
      p1 = Name();
      {if (true) return p1;}
      break;
    default:
      E();
      {if (true) return p1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String OpenJavaModifier() throws ParseException {
    String              result;
    jj_consume_token(IDENTIFIER);
        result = getToken( 0 ).image;
        DebugOut.println( "user modifier detected : " + result );
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Hashtable OpenJavaDeclSuffixListOpt(Environment env) throws ParseException {
    Hashtable                   result = new Hashtable();
    String                      p1;
    ParseTree                   p2;
    if (DeclSuffixLookahead( env )) {
      label_7:
      while (true) {
        p1 = Identifier();
        p2 = UserDeclSuffix(env, p1);
            DebugOut.println( "decl suffix : " + p1 + " " + p2 );
            result.put( p1, p2 );
        if (DeclSuffixLookahead( env )) {
          ;
        } else {
          break label_7;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Hashtable OpenJavaTypeSuffixListOpt(Environment env, String typename) throws ParseException {
    Hashtable                   result = new Hashtable();
    String                          p1;
    ParseTree                   p2;
    if (TypeSuffixLookahead( env, typename )) {
      label_8:
      while (true) {
        p1 = Identifier();
        p2 = UserTypeSuffix(env, typename, p1);
               DebugOut.println( "type suffix : " + p1 + " " + p2 );

               result.put( p1, p2 );
        if (TypeSuffixLookahead( env, typename )) {
          ;
        } else {
          break label_8;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public int Modifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                    {if (true) return ModifierList.ABSTRACT;}
      break;
    case FINAL:
      jj_consume_token(FINAL);
                    {if (true) return ModifierList.FINAL;}
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
                    {if (true) return ModifierList.PUBLIC;}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
                    {if (true) return ModifierList.PRIVATE;}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
                    {if (true) return ModifierList.PROTECTED;}
      break;
    case STATIC:
      jj_consume_token(STATIC);
                    {if (true) return ModifierList.STATIC;}
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
                    {if (true) return ModifierList.TRANSIENT;}
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
                    {if (true) return ModifierList.VOLATILE;}
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
                    {if (true) return ModifierList.NATIVE;}
      break;
    case SYNCHRONIZED:
      jj_consume_token(SYNCHRONIZED);
                    {if (true) return ModifierList.SYNCHRONIZED;}
      break;
    case AT:
      Annotation();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Declaration syntax follows.
 */
  final public ClassDeclaration ClassDeclaration(ClassEnvironment env) throws ParseException {
    ModifierList                    p1;
    ClassDeclaration            p2;

    DebugOut.println( "#ClassDeclaration()" );
    p1 = ClassModifiersOpt(env);
    p2 = UnmodifiedClassDeclaration(env);
      p2.setModifiers( p1 );
      {if (true) return p2;}
    throw new Error("Missing return statement in function");
  }

  final public ModifierList ClassModifiersOpt(Environment env) throws ParseException {
    ModifierList                result = new ModifierList();
    int                         p1;
    String                      p2;
    if ((getToken( 1 ).kind != CLASS)) {
      label_9:
      while (true) {
        if (jj_2_7(2147483647)) {
          p1 = Modifier();
              result.add( p1 );
        } else if (OpenJavaModifierLookahead( env )) {
          p2 = OpenJavaModifier();
              result.add( p2 );
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (ModifierLookahead( env )) {
          ;
        } else {
          break label_9;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclaration UnmodifiedClassDeclaration(ClassEnvironment env) throws ParseException {
    ClassDeclaration            result;
    String                                      p1;
    String                                      tp;
    TypeName[]                          p2;
    TypeName[]                          p3;
    MemberDeclarationList       p4;
    String                                      mm;
    Hashtable                           sf;
    TypeParameterList       tpl = null;
    jj_consume_token(CLASS);
    p1 = Identifier();
                               System.out.println("classname: " + p1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      tpl = TypeParameters(env);
      break;
    default:
      ;
    }
    mm = InstantiatesPhraseOpt(env);
    p2 = ExtendsPhraseOpt(env);
    p3 = ImplementsPhraseOpt(env);
    sf = OpenJavaDeclSuffixListOpt(env);
    p4 = ClassBody(env);
                result = new ClassDeclaration( null, p1, tpl, p2, p3, p4 );
                result.setSuffixes( sf );
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameterList TypeParameters(Environment env) throws ParseException {
        String p1 = "";
        StringBuffer typeParametersName  = null;
        TypeParameter tp;
        TypeParameterList tpl = null;
        String result;
    jj_consume_token(LT);
    tp = TypeParameter(env);
                tpl = new TypeParameterList(tp);
                typeParametersName = new StringBuffer("<" + p1);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_10;
      }
      jj_consume_token(COMMA);
      tp = TypeParameter(env);
                tpl.add(tp);
                typeParametersName.append("," + p1);
    }
    jj_consume_token(GT);
                result = typeParametersName.toString() + ">";
                {if (true) return tpl;}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameter TypeParameter(Environment env) throws ParseException {
        String        typeParameterName;
        String            typeBound = "";
        TypeParameter tp;
    typeParameterName = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      typeBound = TypeBound(env);
      break;
    default:
      ;
    }
           tp = new TypeParameter(typeParameterName, typeBound);
           {if (true) return tp;}
    throw new Error("Missing return statement in function");
  }

  final public String TypeBound(Environment env) throws ParseException {
        String typeBound = "";
        String name;
    jj_consume_token(EXTENDS);
    name = Name();
                  typeBound += name;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_11;
      }
      jj_consume_token(BIT_AND);
      name = Name();
                        typeBound += " & " + name;
    }
    {if (true) return typeBound;}
    throw new Error("Missing return statement in function");
  }

  final public TypeName[] ExtendsPhraseOpt(Environment env) throws ParseException {
    TypeName[]                  p1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      p1 = TypeNameList(env);
      {if (true) return p1;}
      break;
    default:
      E();
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public TypeName[] ImplementsPhraseOpt(Environment env) throws ParseException {
    TypeName[]                  p1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      p1 = TypeNameList(env);
      {if (true) return p1;}
      break;
    default:
      E();
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberDeclarationList ClassBody(ClassEnvironment env) throws ParseException {
    MemberDeclarationList       p1;

    DebugOut.println( "#ClassBody()" );
    jj_consume_token(LBRACE);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        break label_12;
      }
      jj_consume_token(SEMICOLON);
    }
    p1 = ClassBodyDeclarationListOpt(env);
    jj_consume_token(RBRACE);
      {if (true) return p1;}
    throw new Error("Missing return statement in function");
  }

  final public MemberDeclarationList ClassBodyDeclarationListOpt(ClassEnvironment env) throws ParseException {
    MemberDeclarationList       result = new MemberDeclarationList();
    MemberDeclarationList       p1;
    if ((getToken( 1 ).kind != RBRACE)) {
      label_13:
      while (true) {
        p1 = ClassBodyDeclaration(env);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            ;
            break;
          default:
            break label_14;
          }
          jj_consume_token(SEMICOLON);
        }
          result.addAll( p1 );
        if ((getToken( 1 ).kind != RBRACE)) {
          ;
        } else {
          break label_13;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclaration NestedTypeDeclaration(ClassEnvironment env) throws ParseException {
    ClassDeclaration            result;
    ClassDeclaration            p1;
    Token ctoken = getToken( 1 ).specialToken;
    String comment = getComment();
    if (jj_2_8(2147483647)) {
      p1 = NestedClassDeclaration(env);
    } else {
      p1 = NestedInterfaceDeclaration(env);
    }
        result = p1;
        result.setComment( comment );
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclaration NestedClassDeclaration(ClassEnvironment env) throws ParseException {
    ModifierList                        p1;
    ClassDeclaration            p2;

    DebugOut.println( "#NestedClassDeclaration()" );
    p1 = NestedClassModifiersOpt(env);
    p2 = UnmodifiedClassDeclaration(env);
      p2.setModifiers( p1 );
      {if (true) return p2;}
    throw new Error("Missing return statement in function");
  }

  final public ModifierList NestedClassModifiersOpt(ClassEnvironment env) throws ParseException {
    ModifierList                result = new ModifierList();
    int                         p1;
    String                      p2;
    if ((getToken( 1 ).kind != CLASS)) {
      label_15:
      while (true) {
        if (jj_2_9(2147483647)) {
          p1 = Modifier();
              result.add( p1 );
        } else if (OpenJavaModifierLookahead( env )) {
          p2 = OpenJavaModifier();
              result.add( p2 );
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (ModifierLookahead( env )) {
          ;
        } else {
          break label_15;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberDeclarationList ClassBodyDeclaration(ClassEnvironment env) throws ParseException {
    ClassEnvironment  newenv;
    MemberDeclarationList       result;
    MemberDeclaration           p1;
    MemberDeclarationList       p2;
    if (jj_2_10(2147483647)) {
      p1 = MemberInitializer(env);
      result = new MemberDeclarationList( p1 );
      {if (true) return result;}
    } else if (jj_2_11(2147483647)) {
       newenv = setClassEnvironment( env );
      p1 = NestedTypeDeclaration(newenv);
      result = new MemberDeclarationList( p1 );
      {if (true) return result;}
    } else if (ConstructorDeclarationLookahead( env )) {
      p1 = ConstructorDeclaration(env);
      result = new MemberDeclarationList( p1 );
      {if (true) return result;}
    } else if (jj_2_12(2147483647)) {
      AnnotationTypeDeclaration(env);
    } else if (jj_2_13(2147483647)) {
      p1 = EnumDeclaration(env);
         {if (true) return new MemberDeclarationList(p1);}
    } else {
      p2 = MethodOrFieldDeclaration(env);
      {if (true) return p2;}
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberDeclaration EnumDeclaration(ClassEnvironment env) throws ParseException {
        int modifierInt = 0;
        ModifierList modifierList = new ModifierList();
        String result = "";
        String identifier = "";
        MemberDeclaration md;
        TypeName [] tn = null;
        EnumConstant enumConstant = null;
        EnumConstantList enumConstantsList = new EnumConstantList();
        MemberDeclarationList mdl = null;
        ClassEnvironment newEnv = null;
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case AT:
        ;
        break;
      default:
        break label_16;
      }
      modifierInt = Modifier();
                                  modifierList.add(modifierInt);
    }
    jj_consume_token(ENUM);
    identifier = Identifier();
                             result += identifier;
    newEnv = setEnumEnvironment(env, identifier);
    tn = ImplementsPhraseOpt(newEnv);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case METACLASS:
    case IDENTIFIER:
    case AT:
      enumConstant = EnumConstant(newEnv, identifier);
        enumConstantsList.add(enumConstant);
      label_17:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_17;
        }
        jj_consume_token(COMMA);
        enumConstant = EnumConstant(newEnv, identifier);
                                                                          enumConstantsList.add(enumConstant);
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      mdl = ClassBodyDeclarationListOpt(newEnv);
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
    md = new EnumDeclaration(modifierList, identifier, tn, enumConstantsList, mdl);
   {if (true) return md;}
    throw new Error("Missing return statement in function");
  }

  final public EnumConstant EnumConstant(ClassEnvironment env, String enumClass) throws ParseException {
        int modifierInt = 0;
        ModifierList modifierList = new ModifierList();
        String identifier = "";
        ExpressionList exprList = null;
        MemberDeclarationList membDeclaList = null;
        String enumType = enumClass;
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case AT:
        ;
        break;
      default:
        break label_18;
      }
      modifierInt = Modifier();
                                 modifierList.add(modifierInt);
    }
    identifier = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      exprList = Arguments(env);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      membDeclaList = ClassBody(env);
      break;
    default:
      ;
    }
    {if (true) return new EnumConstant(modifierList, identifier, exprList, membDeclaList, enumType);}
    throw new Error("Missing return statement in function");
  }

  final public MemberDeclarationList MethodOrFieldDeclaration(Environment base_env) throws ParseException {
    Environment                     env    = new ClosedEnvironment( base_env );
    MemberDeclarationList       result = new MemberDeclarationList();
    ModifierList                    p1;
    TypeName                        p2;
    String                              p3;
    ParameterList                   p4;
    int                                         p5;
    TypeName[]                          p6;
    StatementList                       p7;
    VariableDeclarator          p8;
    Hashtable                           sf;
    TypeParameterList           tpl = null;
    Token                   ctoken  = getToken( 1 ).specialToken;
    String                  comment = getComment();
    if (jj_2_16(2147483647)) {
      Annotation();
      label_19:
      while (true) {
        if (jj_2_15(2147483647)) {
          ;
        } else {
          break label_19;
        }
        Annotation();
      }
      p1 = MemberModifiersOpt(base_env);
    } else {
      p1 = MemberModifiersOpt(base_env);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      tpl = TypeParameters(base_env);
      break;
    default:
      ;
    }
    p2 = Type(base_env);

    if (jj_2_17(2147483647)) {
      p3 = Identifier();
      p4 = FormalParameters(env);
      p5 = EmptyBracketsOpt();
      p6 = ThrowsPhraseOpt(base_env);
      sf = OpenJavaDeclSuffixListOpt(env);
      p7 = MethodBody(env);
                        p2.addDimension( p5 );
                        MethodDeclaration mthd
                        = new MethodDeclaration( p1, p2, p3, p4, p6, p7, tpl );
                        mthd.setSuffixes( sf );
                        mthd.setComment( comment );
                        result.add( mthd );
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METACLASS:
      case IDENTIFIER:
        p8 = VariableDeclarator(base_env);
                        FieldDeclaration fld1 = new FieldDeclaration( p1, p2, p8 );
                        fld1.setComment( comment );
                        result.add( fld1 );
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_20;
          }
          jj_consume_token(COMMA);
          p8 = VariableDeclarator(env);
                        FieldDeclaration fld2 = new FieldDeclaration( p1, p2, p8 );
                        fld2.setComment( comment );
                        result.add( fld2 );
        }
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TypeName[] ThrowsPhraseOpt(Environment env) throws ParseException {
    TypeName[]                  p1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      p1 = TypeNameList(env);
      {if (true) return p1;}
      break;
    default:
      E();
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public StatementList MethodBody(Environment env) throws ParseException {
    StatementList               p1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      p1 = BlockedBody(env);
      {if (true) return p1;}
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      {if (true) return null;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ModifierList MemberModifiersOpt(Environment env) throws ParseException {
    ModifierList                result = new ModifierList();
    int                         p1;
    String                      p2;
    if (modifierCheck( env, getToken( 1 ) )) {
      label_21:
      while (true) {
        if (jj_2_18(2147483647)) {
          p1 = Modifier();
              result.add( p1 );
        } else if (OpenJavaModifierLookahead( env )) {
          p2 = OpenJavaModifier();
              result.add( p2 );
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (ModifierLookahead( env )) {
          ;
        } else {
          break label_21;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclaration InterfaceDeclaration(ClassEnvironment env) throws ParseException {
    ModifierList                p1;
    ClassDeclaration            p2;

    DebugOut.println( "#InterfaceDeclaration()" );
    p1 = InterfaceModifiersOpt(env);
    p2 = UnmodifiedInterfaceDeclaration(env);
      p2.setModifiers( p1 );
      {if (true) return p2;}
    throw new Error("Missing return statement in function");
  }

  final public ModifierList InterfaceModifiersOpt(Environment env) throws ParseException {
    ModifierList                result = new ModifierList();
    int                         p1;
    String                      p2;
    if ((getToken( 1 ).kind != INTERFACE)) {
      label_22:
      while (true) {
        if (jj_2_19(2147483647)) {
          p1 = Modifier();
              result.add( p1 );
        } else if (OpenJavaModifierLookahead( env )) {
          p2 = OpenJavaModifier();
              result.add( p2 );
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (ModifierLookahead( env )) {
          ;
        } else {
          break label_22;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclaration NestedInterfaceDeclaration(ClassEnvironment env) throws ParseException {
    ModifierList                p1;
    ClassDeclaration            p2;

    DebugOut.println( "#NestedInterfaceDeclaration()" );
    p1 = NestedInterfaceModifiersOpt(env);
    p2 = UnmodifiedInterfaceDeclaration(env);
      p2.setModifiers( p1 );
      {if (true) return p2;}
    throw new Error("Missing return statement in function");
  }

  final public ModifierList NestedInterfaceModifiersOpt(ClassEnvironment env) throws ParseException {
    ModifierList                result = new ModifierList();
    int                         p1;
    String                      p2;
    if ((getToken( 1 ).kind != INTERFACE)) {
      label_23:
      while (true) {
        if (jj_2_20(2147483647)) {
          p1 = Modifier();
              result.add( p1 );
        } else if (OpenJavaModifierLookahead( env )) {
          p2 = OpenJavaModifier();
              result.add( p2 );
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (ModifierLookahead( env )) {
          ;
        } else {
          break label_23;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclaration UnmodifiedInterfaceDeclaration(ClassEnvironment env) throws ParseException {
    ClassDeclaration            result;
    String                      p1;
    TypeName[]                  p2;
    MemberDeclarationList       p3;
    String                      mm;
    Hashtable                   sf;
    jj_consume_token(INTERFACE);
    p1 = Identifier();
    mm = InstantiatesPhraseOpt(env);
    p2 = ExtendsPhraseOpt(env);
    sf = OpenJavaDeclSuffixListOpt(env);
    p3 = InterfaceBody(env);
        result = new ClassDeclaration( null, p1, null, p2, null, p3, false );
        result.setSuffixes( sf );
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public MemberDeclarationList InterfaceBody(ClassEnvironment env) throws ParseException {
    MemberDeclarationList       p1;
    jj_consume_token(LBRACE);
    p1 = InterfaceBodyDeclarationListOpt(env);
    jj_consume_token(RBRACE);
      {if (true) return p1;}
    throw new Error("Missing return statement in function");
  }

  final public MemberDeclarationList InterfaceBodyDeclarationListOpt(ClassEnvironment env) throws ParseException {
    MemberDeclarationList       result = new MemberDeclarationList();
    MemberDeclarationList       p1;
    if ((getToken( 1 ).kind != RBRACE)) {
      label_24:
      while (true) {
        p1 = InterfaceBodyDeclaration(env);
          result.addAll( p1 );
        if ((getToken( 1 ).kind != RBRACE)) {
          ;
        } else {
          break label_24;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberDeclarationList InterfaceBodyDeclaration(ClassEnvironment env) throws ParseException {
    ClassEnvironment  newenv;
    MemberDeclarationList       result;
    ClassDeclaration            p1;
    MemberDeclarationList       p2;
    if (jj_2_21(2147483647)) {
      newenv = setClassEnvironment( env );
      p1 = NestedTypeDeclaration(newenv);
      result = new MemberDeclarationList( p1 );
      {if (true) return result;}
    } else {
      p2 = MethodOrFieldDeclaration(env);
      {if (true) return p2;}
    }
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarator VariableDeclarator(Environment env) throws ParseException {
    String                                      p1;
    int                                         p2;
    VariableInitializer         p3 = null;
    p1 = Identifier();
    p2 = EmptyBracketsOpt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      p3 = VariableInitializer(env);
      break;
    default:
      ;
    }
      {if (true) return new VariableDeclarator( p1, p2, p3 );}
    throw new Error("Missing return statement in function");
  }

  final public int EmptyBracketsOpt() throws ParseException {
    int                         result = 0;
    if (jj_2_23(2147483647)) {
      label_25:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                             result++;
        if (jj_2_22(2)) {
          ;
        } else {
          break label_25;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public VariableInitializer VariableInitializer(Environment env) throws ParseException {
    VariableInitializer         p1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      p1 = ArrayInitializer(env);
      {if (true) return p1;}
      break;
    default:
      if (jj_2_24(1)) {
        p1 = Expression(env);
      {if (true) return p1;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayInitializer ArrayInitializer(Environment env) throws ParseException {
    ArrayInitializer            result = new ArrayInitializer();
    VariableInitializer         p1;
    jj_consume_token(LBRACE);
    if ((getToken( 1 ).kind != RBRACE
                         && getToken( 1 ).kind != COMMA)) {
      p1 = VariableInitializer(env);
           result.add( p1 );
      label_26:
      while (true) {
        if ((getToken( 1 ).kind == COMMA
                                 && getToken( 2 ).kind != RBRACE)) {
          ;
        } else {
          break label_26;
        }
        jj_consume_token(COMMA);
        p1 = VariableInitializer(env);
               result.add( p1 );
      }
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
             result.omitRemainder( true );
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
       {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ParameterList FormalParameters(Environment env) throws ParseException {
    ParameterList               result = new ParameterList();
    Parameter                   p1;

    DebugOut.println( "#FormalParameters()" );
    jj_consume_token(LPAREN);
    if ((getToken( 1 ).kind != RPAREN)) {
      p1 = FormalParameter(env);
          result.add( p1 );
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_27;
        }
        jj_consume_token(COMMA);
        p1 = FormalParameter(env);
                                          result.add( p1 );
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Parameter FormalParameter(Environment env) throws ParseException {
    ModifierList                p1;
    TypeName                    p2;
    String                              p3;
    int                                 p4;
    boolean                             p5 = false;
    DebugOut.println( "#FormalParameter()" );
    p1 = FormalParameterModifiersOpt(env);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      Annotation();
      break;
    default:
      ;
    }
    p2 = Type(env);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
              p5 = true;
      break;
    default:
      ;
    }
    p3 = Identifier();
    p4 = EmptyBracketsOpt();
        p2.addDimension( p4 );
        /* binds the parameter variable as the null type */
        env.bindVariable(p3, OJSystem.NULLTYPE);
      {if (true) return new Parameter( p1, p2, p3, p5 );}
    throw new Error("Missing return statement in function");
  }

  final public ModifierList FormalParameterModifiersOpt(Environment env) throws ParseException {
    ModifierList                result = new ModifierList();
    int                                 p1;
    String                              p2;
    if (modifierCheck( env, getToken( 1 ) )) {
      label_28:
      while (true) {
        if (jj_2_25(2147483647)) {
          p1 = Modifier();
                      result.add( p1 );
        } else if (OpenJavaModifierLookahead( env )) {
          p2 = OpenJavaModifier();
                      result.add( p2 );
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (ModifierLookahead( env )) {
          ;
        } else {
          break label_28;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ConstructorDeclaration ConstructorDeclaration(Environment base_env) throws ParseException {
    Environment                 env = new ClosedEnvironment( base_env );
    ConstructorDeclaration      result;
    ModifierList                p1;
    String                      p2;
    ParameterList               p3;
    TypeName[]                  p4;
    ConstructorInvocation       p5;
    StatementList               p6;
    Hashtable                   sf;

    DebugOut.println( "#ConstructorDeclaration()" );
    p1 = ConstructorModifiersOpt(base_env);
    p2 = Identifier();
    p3 = FormalParameters(env);
    p4 = ThrowsPhraseOpt(base_env);
    sf = OpenJavaDeclSuffixListOpt(env);
    jj_consume_token(LBRACE);
    p5 = ExplicitConstructorInvocationOpt(env);
    p6 = BlockOrStatementListOpt(env);
    jj_consume_token(RBRACE);
        result = new ConstructorDeclaration( p1, p2, p3, p4, p5, p6 );
        result.setSuffixes( sf );
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ModifierList ConstructorModifiersOpt(Environment env) throws ParseException {
    ModifierList                result = new ModifierList();
    int                         p1;
    String                      p2;
    if (jj_2_26(2147483647)) {
      p1 = Modifier();
      result.add( p1 );
      label_29:
      while (true) {
        if (OpenJavaModifierLookahead( env )) {
          ;
        } else {
          break label_29;
        }
        p2 = OpenJavaModifier();
          result.add( p2 );
      }
      {if (true) return result;}
    } else if (OpenJavaModifierLookahead( env )) {
      label_30:
      while (true) {
        p2 = OpenJavaModifier();
          result.add( p2 );
        if (OpenJavaModifierLookahead( env )) {
          ;
        } else {
          break label_30;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case AT:
        p1 = Modifier();
          result.add( p1 );
        label_31:
        while (true) {
          if (OpenJavaModifierLookahead( env )) {
            ;
          } else {
            break label_31;
          }
          p2 = OpenJavaModifier();
              result.add( p2 );
        }
        break;
      default:
        ;
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ConstructorInvocation ExplicitConstructorInvocationOpt(Environment env) throws ParseException {
    ExpressionList              p1;
    Expression                  p2 = null;

    DebugOut.println( "#ExplicitConstructorInvocationOpt()" );
    if (jj_2_27(2147483647)) {
      jj_consume_token(THIS);
      p1 = Arguments(env);
      jj_consume_token(SEMICOLON);
      {if (true) return new ConstructorInvocation( p1 );}
    } else if (ConstructorInvocationLookahead()) {
      if ((getToken( 1 ).kind != SUPER)) {
        p2 = PrimaryExpression(env);
        jj_consume_token(DOT);
      } else {
        ;
      }
      jj_consume_token(SUPER);
      p1 = Arguments(env);
      jj_consume_token(SEMICOLON);
      {if (true) return new ConstructorInvocation( p1, p2 );}
    } else {
      E();
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberInitializer MemberInitializer(Environment env) throws ParseException {
    MemberInitializer           result;
    StatementList               p1;
    boolean is_static = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
                 is_static = true;
      break;
    default:
      ;
    }
    p1 = BlockedBody(env);
        if (is_static) {
            result = new MemberInitializer( p1, true );
        } else {
            result = new MemberInitializer( p1 );
        }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  final public TypeName Type(Environment env) throws ParseException {
    TypeName                    result;
    String                          p1;
    Hashtable                   p2;
    int                             p3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
      p1 = PrimitiveType();
      break;
    case METACLASS:
    case IDENTIFIER:
      p1 = Name();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    p2 = OpenJavaTypeSuffixListOpt(env, p1);
    p3 = EmptyBracketsOpt();
    /*	System.out.println("Type:p1: " + p1);
    	System.out.println("p2: " + p2);
    	System.out.println("p3: " + p3);*/
                result = new TypeName( p1, p3, p2 );
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TypeName TypeWithoutDims(Environment env) throws ParseException {
    String                          p1;
    Hashtable                   p2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
      p1 = PrimitiveType();
      break;
    case METACLASS:
    case IDENTIFIER:
      p1 = Name();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    p2 = OpenJavaTypeSuffixListOpt(env, p1);
    /*
    System.out.println("TypeWithoutDims:p1: " + p1);
    System.out.println("p2: " + p2);
    */
    {if (true) return new TypeName( p1, p2 );}
    throw new Error("Missing return statement in function");
  }

  final public void TypeWithoutSematics() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
      PrimitiveType();
      break;
    case METACLASS:
    case IDENTIFIER:
      Name();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    EmptyBracketsOpt();
  }

  final public String TypeWithoutSemantics() throws ParseException {
        String result = "";
        String emptyBrackets = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
      result = PrimitiveType();
      break;
    case METACLASS:
    case IDENTIFIER:
      result = Name();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    emptyBrackets = EmptyBrackets();
                result += emptyBrackets;
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String EmptyBrackets() throws ParseException {
    String                              result = "";
    label_32:
    while (true) {
      if (jj_2_28(2)) {
        ;
      } else {
        break label_32;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                             result+= "[]";
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String PrimitiveType() throws ParseException {
    String                      result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case BYTE:
      jj_consume_token(BYTE);
      break;
    case SHORT:
      jj_consume_token(SHORT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      result = getToken( 0 ).image;
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String Name() throws ParseException {
    String               p1, p2;
    StringBuffer strbuf = null;
    p1 = Identifier();
                        strbuf = new StringBuffer( p1 );
    if (jj_2_29(2)) {
      p2 = TypeArguments();
          strbuf.append(p2);
    } else {
      ;
    }
    label_33:
    while (true) {
      if (jj_2_30(2)) {
        ;
      } else {
        break label_33;
      }
      jj_consume_token(DOT);
      p1 = Identifier();
          strbuf.append( "." + p1 );
      if (jj_2_31(2)) {
        p2 = TypeArguments();
                                             strbuf.append(p2);
      } else {
        ;
      }
    }
                /* System.out.println("name: " + strbuf.toString()); */
        {if (true) return strbuf.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String TypeArguments() throws ParseException {
        String       p1;
        StringBuffer typeArguementsName = null;
        String       result;
    jj_consume_token(LT);
    p1 = TypeArgument();
                typeArguementsName = new StringBuffer( "<" + p1 );
                //System.out.println("typeArguementsName: " + typeArguementsName);

    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_34;
      }
      jj_consume_token(COMMA);
      p1 = TypeArgument();
                typeArguementsName.append("," + p1);
    }
    jj_consume_token(GT);
                result = typeArguementsName.toString() + ">";
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String TypeArgument() throws ParseException {
        String typeArgumentName;
        String p1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METACLASS:
    case IDENTIFIER:
      typeArgumentName = Name();
    {if (true) return typeArgumentName;}
      break;
    case HOOK:
      jj_consume_token(HOOK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case SUPER:
        p1 = WildcardBounds();
      {if (true) return "? " + p1;}
        break;
      default:
        ;
      }
    {if (true) return "?";}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String WildcardBounds() throws ParseException {
        String wildcardBoundsName;
        String p1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      p1 = Name();
    {if (true) return "extends " + p1;}
      break;
    case SUPER:
      jj_consume_token(SUPER);
      p1 = Name();
    {if (true) return "super " + p1;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
 * this TypeName() is equivalent to Name() with repect to the parsing function, but it is adapted for openJava
 * this TypeName() only deals with reference types e.g. openjava.tools.parser.Parser. It does not include primitive types or arrays.
 */
  final public TypeName TypeName(Environment env) throws ParseException {
    TypeName                    result = null;
    String                          p1;
    Hashtable                   p2;
    p1 = Name();
    p2 = OpenJavaTypeSuffixListOpt(env, p1);
        result = new TypeName( p1, p2 );
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*
 * used for ExtendPhraseOpt, ImplementsPhraseOpt, and ThrowsPhraseOpt
 */
  final public TypeName[] TypeNameList(Environment env) throws ParseException {
    TypeName[]                  result;
    TypeName                    p1;
    Vector  v = new Vector();
    p1 = TypeName(env);
                         v.addElement( p1 );
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_35;
      }
      jj_consume_token(COMMA);
      p1 = TypeName(env);
                             v.addElement( p1 );
    }
        result = new TypeName[v.size()];
        for (int i = 0; i < result.length; ++i) {
            result[i] = (TypeName) v.elementAt( i );
        }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*
 * This production is not used
 */
  final public TypeName[] TypeNameListOpt(Environment env) throws ParseException {
    TypeName[]                  result;
    TypeName                    p1;
    Vector  v = new Vector();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METACLASS:
    case IDENTIFIER:
      p1 = TypeName(env);
                         v.addElement( p1 );
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_36;
        }
        jj_consume_token(COMMA);
        p1 = TypeName(env);
                             v.addElement( p1 );
      }
        result = new TypeName[v.size()];
        for (int i = 0; i < result.length; ++i) {
            result[i] = (TypeName) v.elementAt( i );
        }
      {if (true) return result;}
      break;
    default:
      E();
      {if (true) return new TypeName[0];}
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public Expression Expression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    String                          p2 = null;
    Expression                  p3 = null;

    DebugOut.println( "#Expression()" );
    p1 = ConditionalExpression(env);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case LSHIFTASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
      p2 = AssignmentOperator();
      p3 = Expression(env);
      break;
    default:
      ;
    }
        if (p2 != null) {
            result = new AssignmentExpression( p1, p2, p3 );
        } else {
            result = p1;
        }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentExpression AssignmentExpression(Environment env) throws ParseException {
    Expression                  p1;
    String                              p2;
    Expression                  p3;

    DebugOut.println( "#AssignmentExpression()" );
    p1 = PrimaryExpression(env);
    p2 = AssignmentOperator();
    p3 = Expression(env);
      {if (true) return new AssignmentExpression( p1, p2, p3 );}
    throw new Error("Missing return statement in function");
  }

  final public String AssignmentOperator() throws ParseException {
    String                      result;

    DebugOut.println( "#AssignmentOperator()" );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      result = getToken( 0 ).image;
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    Expression                  p2 = null;
    Expression                  p3 = null;
    p1 = ConditionalOrExpression(env);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      p2 = Expression(env);
      jj_consume_token(COLON);
      p3 = ConditionalExpression(env);
      break;
    default:
      ;
    }
        if (p2 != null) {
            result = new ConditionalExpression( p1, p2, p3 );
        } else {
            result = p1;
        }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    String                              p2;
    Expression                  p3;
    p1 = ConditionalAndExpression(env);
      result = p1;
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        break label_37;
      }
      jj_consume_token(SC_OR);
               p2 = getToken( 0 ).image;
      p3 = ConditionalAndExpression(env);
          result = new BinaryExpression( result, p2, p3 );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalAndExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    String                      p2;
    Expression                  p3;
    p1 = InclusiveOrExpression(env);
      result = p1;
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        break label_38;
      }
      jj_consume_token(SC_AND);
               p2 = getToken( 0 ).image;
      p3 = InclusiveOrExpression(env);
          result = new BinaryExpression( result, p2, p3 );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InclusiveOrExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    String                      p2;
    Expression                  p3;
    p1 = ExclusiveOrExpression(env);
      result = p1;
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_39;
      }
      jj_consume_token(BIT_OR);
              p2 = getToken( 0 ).image;
      p3 = ExclusiveOrExpression(env);
          result = new BinaryExpression( result, p2, p3 );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExclusiveOrExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    String                      p2;
    Expression                  p3;
    p1 = AndExpression(env);
      result = p1;
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        break label_40;
      }
      jj_consume_token(XOR);
              p2 = getToken( 0 ).image;
      p3 = AndExpression(env);
          result = new BinaryExpression( result, p2, p3 );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AndExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    String                      p2;
    Expression                  p3;
    p1 = EqualityExpression(env);
      result = p1;
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_41;
      }
      jj_consume_token(BIT_AND);
              p2 = getToken( 0 ).image;
      p3 = EqualityExpression(env);
          result = new BinaryExpression( result, p2, p3 );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EqualityExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    String                      p2;
    Expression                  p3;

    DebugOut.println( "#EqualityExpression()" );
    p1 = InstanceofExpression(env);
      result = p1;
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_42;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                          p2 = getToken( 0 ).image;
      p3 = InstanceofExpression(env);
          result = new BinaryExpression( result, p2, p3 );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InstanceofExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    TypeName                    p2 = null;
    p1 = RelationalExpression(env);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      p2 = Type(env);
      break;
    default:
      ;
    }
        if (p2 != null) {
            result = new InstanceofExpression( p1, p2 );
        } else {
            result = p1;
        }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    String                      p2;
    Expression                  p3;
    p1 = ShiftExpression(env);
      result = p1;
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GE:
      case GT:
        ;
        break;
      default:
        break label_43;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                                      p2 = getToken( 0 ).image;
      p3 = ShiftExpression(env);
          result = new BinaryExpression( result, p2, p3 );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ShiftExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    String                          p2;
    Expression                  p3;
    p1 = AdditiveExpression(env);
      result = p1;
    label_44:
    while (true) {
      if (jj_2_32(1)) {
        ;
      } else {
        break label_44;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
        break;
      default:
        if (jj_2_33(1)) {
          RSIGNEDSHIFT();
        } else if (jj_2_34(1)) {
          RUNSIGNEDSHIFT();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          p2 = getToken( 0 ).image;
      p3 = AdditiveExpression(env);
          result = new BinaryExpression( result, p2, p3 );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    String                      p2;
    Expression                  p3;
    p1 = MultiplicativeExpression(env);
      result = p1;
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_45;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                        p2 = getToken( 0 ).image;
      p3 = MultiplicativeExpression(env);
          result = new BinaryExpression( result, p2, p3 );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    String                      p2;
    Expression                  p3;
    p1 = UnaryExpression(env);
      result = p1;
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        break label_46;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case REM:
        jj_consume_token(REM);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                              p2 = getToken( 0 ).image;
      p3 = UnaryExpression(env);
          result = new BinaryExpression( result, p2, p3 );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpression(Environment env) throws ParseException {
    int                         p1;
    Expression                  p2;
    if (jj_2_35(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
              p1 = UnaryExpression.PLUS;
        break;
      case MINUS:
        jj_consume_token(MINUS);
              p1 = UnaryExpression.MINUS;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      p2 = UnaryExpression(env);
      {if (true) return new UnaryExpression( p1, p2 );}
    } else if (jj_2_36(2147483647)) {
      p2 = PreIncrementDecrementExpression(env);
      {if (true) return p2;}
    } else if (jj_2_37(1)) {
      p2 = UnaryExpressionNotPlusMinus(env);
      {if (true) return p2;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression PreIncrementDecrementExpression(Environment env) throws ParseException {
    int                             p1;
    Expression                  p2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      jj_consume_token(INCR);
               p1 = UnaryExpression.PRE_INCREMENT;
      break;
    case DECR:
      jj_consume_token(DECR);
               p1 = UnaryExpression.PRE_DECREMENT;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    p2 = PrimaryExpression(env);
      {if (true) return new UnaryExpression( p1, p2 );}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpressionNotPlusMinus(Environment env) throws ParseException {
    int                         p1;
    Expression                  p2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
              p1 = UnaryExpression.BIT_NOT;
        break;
      case BANG:
        jj_consume_token(BANG);
              p1 = UnaryExpression.NOT;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      p2 = UnaryExpression(env);
      {if (true) return new UnaryExpression( p1, p2 );}
      break;
    default:
      if (jj_2_38(2147483647)) {
        p2 = CastExpression(env);
      {if (true) return p2;}
      } else if (jj_2_39(1)) {
        p2 = PostfixExpression(env);
      {if (true) return p2;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void CastLookahead(Environment env) throws ParseException {
    if (jj_2_40(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_41(2147483647)) {
      jj_consume_token(LPAREN);
      Name();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else if (jj_2_42(2147483647)) {
      jj_consume_token(LPAREN);
      Name();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        break;
      case METACLASS:
      case IDENTIFIER:
        Identifier();
        break;
      case THIS:
        jj_consume_token(THIS);
        break;
      case SUPER:
        jj_consume_token(SUPER);
        break;
      case NEW:
        jj_consume_token(NEW);
        break;
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_FLOATING_POINT_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Literal();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Name();
        Identifier();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public Expression PostfixExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    int                             p2 = -1;
    p1 = PrimaryExpression(env);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
               p2 = UnaryExpression.POST_INCREMENT;
        break;
      case DECR:
        jj_consume_token(DECR);
               p2 = UnaryExpression.POST_DECREMENT;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
        if (p2 != -1) {
            result = new UnaryExpression( p1, p2 );
        } else {
            result = p1;
        }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public CastExpression CastExpression(Environment env) throws ParseException {
    TypeName                    p1;
    Expression                  p2;

    DebugOut.println( "#CastExpression()" );
    if (jj_2_43(2147483647)) {
      jj_consume_token(LPAREN);
      p1 = Type(env);
      jj_consume_token(RPAREN);
      p2 = UnaryExpression(env);
      {if (true) return new CastExpression( p1, p2 );}
    } else if (jj_2_44(2147483647)) {
      jj_consume_token(LPAREN);
      p1 = Type(env);
      jj_consume_token(RPAREN);
      p2 = UnaryExpressionNotPlusMinus(env);
      {if (true) return new CastExpression( p1, p2 );}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression SelfAccess(Environment env) throws ParseException {
    Expression                  result;
    String                      p1 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METACLASS:
    case IDENTIFIER:
      p1 = Name();
      jj_consume_token(DOT);
      break;
    default:
      ;
    }
    jj_consume_token(THIS);
        if (p1 != null) {
            result = SelfAccess.makeThis( p1 );
        } else {
            result = SelfAccess.constantThis();
        }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ClassLiteral ClassLiteral(Environment env) throws ParseException {
    TypeName                    p1;
    p1 = Type(env);
    jj_consume_token(DOT);
    jj_consume_token(CLASS);
      {if (true) return new ClassLiteral( p1 );}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpression(Environment env) throws ParseException {
    Expression                  result;
    Expression                  p1;
    Expression                  p2;
    Expression                  p3;
    String                          p4;
    ExpressionList              p5;
    p1 = PrimaryPrefix(env);
      result = p1;
    label_47:
    while (true) {
      if (jj_2_45(2147483647)) {
        ;
      } else {
        break label_47;
      }
      if (jj_2_46(2147483647)) {
        jj_consume_token(DOT);
        p2 = AllocationExpression(env);
                        AllocationExpression alloc = (AllocationExpression) p2;
                        alloc.setEncloser( result );
                        result = alloc;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
          p3 = Expression(env);
          jj_consume_token(RBRACKET);
              result = new ArrayAccess( result, p3 );
          break;
        case DOT:
          jj_consume_token(DOT);
          p4 = Identifier();
              result = new FieldAccess( result, p4 );
          break;
        case LPAREN:
          p5 = Arguments(env);
                        FieldAccess base = (FieldAccess) result;
                        Expression expr = base.getReferenceExpr();
                        String name = base.getName();
                        result = new MethodCall( expr, name, p5 );
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryPrefix(Environment env) throws ParseException {
    Expression                  p1;
    String                      p2;

    DebugOut.println( "#PrimaryPrefix()" );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case DOUBLE_FLOATING_POINT_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      p1 = Literal();
      {if (true) return p1;}
      break;
    default:
      if (jj_2_47(2147483647)) {
        p1 = SelfAccess(env);
      {if (true) return p1;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUPER:
          jj_consume_token(SUPER);
          jj_consume_token(DOT);
          p2 = Identifier();
      {if (true) return new FieldAccess( SelfAccess.constantSuper(), p2 );}
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          p1 = Expression(env);
          jj_consume_token(RPAREN);
      {if (true) return p1;}
          break;
        case NEW:
          p1 = AllocationExpression(env);
      {if (true) return p1;}
          break;
        default:
          if (ClassLiteralLookahead()) {
            p1 = ClassLiteral(env);
      {if (true) return p1;}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case METACLASS:
            case IDENTIFIER:
              p1 = TempFieldAccess(env);
      {if (true) return p1;}
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FieldAccess TempFieldAccess(Environment env) throws ParseException {
    FieldAccess                 result;
    String                      p1;
    StringBuffer  strbuf = null;
    p1 = Identifier();
    label_48:
    while (true) {
      if (jj_2_48(2147483647)) {
        ;
      } else {
        break label_48;
      }
      jj_consume_token(DOT);
            if (strbuf == null) {
                strbuf = new StringBuffer( p1 );
            } else {
                strbuf.append( "." + p1 );
            }
      p1 = Identifier();
    }
        if (strbuf == null || strbuf.length() == 0) {
            result = new FieldAccess( (Variable) null, p1 );
        } else {
            Variable var = new Variable( strbuf.toString() );
            result = new FieldAccess( var, p1 );
        }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
    String                      p1;
    Literal                     p2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
                        p1 = getToken( 0 ).image;
      {if (true) return new Literal( Literal.INTEGER, p1 );}
      break;
    case LONG_LITERAL:
      jj_consume_token(LONG_LITERAL);
                     p1 = getToken( 0 ).image;
      {if (true) return new Literal( Literal.LONG, p1 );}
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
                               p1 = getToken( 0 ).image;
      {if (true) return new Literal( Literal.FLOAT, p1 );}
      break;
    case DOUBLE_FLOATING_POINT_LITERAL:
      jj_consume_token(DOUBLE_FLOATING_POINT_LITERAL);
                                      p1 = getToken( 0 ).image;
      {if (true) return new Literal( Literal.DOUBLE, p1 );}
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
                          p1 = getToken( 0 ).image;
      {if (true) return new Literal( Literal.CHARACTER, p1 );}
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                       p1 = getToken( 0 ).image;
      {if (true) return new Literal( Literal.STRING, p1 );}
      break;
    case TRUE:
      jj_consume_token(TRUE);
      {if (true) return Literal.constantTrue();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
      {if (true) return Literal.constantFalse();}
      break;
    case NULL:
      jj_consume_token(NULL);
      {if (true) return Literal.constantNull();}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList Arguments(Environment env) throws ParseException {
    ExpressionList              result = new ExpressionList();
    Expression                  p1;

    DebugOut.println( "#Arguments()" );
    jj_consume_token(LPAREN);
    if (jj_2_49(1)) {
      p1 = Expression(env);
          result.add( p1 );
      label_49:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_49;
        }
        jj_consume_token(COMMA);
        p1 = Expression(env);
              result.add( p1 );
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AllocationExpression(Environment env) throws ParseException {
    Expression                                  result;
    AllocationExpression                aloc_result;
    TypeName                                    p1;
    ArrayAllocationExpression   p2;
    ExpressionList                              p3;
    MemberDeclarationList               p4 = null;

    DebugOut.println( "#AllocationExpression()" );
    if (jj_2_51(2147483647)) {
      jj_consume_token(NEW);
      p1 = TypeWithoutDims(env);
      p2 = ArrayDimsAndInits(env, p1);
      result = p2;
      {if (true) return result;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        p1 = TypeWithoutDims(env);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          TypeArguments();
          break;
        default:
          ;
        }
        if (jj_2_50(2147483647)) {
          p2 = ArrayDimsAndInits(env, p1);
          result = p2;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            p3 = Arguments(env);
          aloc_result = new AllocationExpression( p1, p3, p4 );
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
              p4 = ClassBody(new ClassEnvironment( env ));
                          aloc_result.setClassBody( p4 );
              break;
            default:
              ;
            }
          result = aloc_result;
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      {if (true) return result;}
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayAllocationExpression ArrayDimsAndInits(Environment env, TypeName type) throws ParseException {
    Expression                  p1;
    int                         p2;
    ArrayInitializer            p3;
    ExpressionList  exprs = new ExpressionList();
    if (jj_2_52(2147483647)) {
      p2 = EmptyBracketsOpt();
      p3 = ArrayInitializer(env);
      for (int i = 0; i < p2; ++i)  exprs.add( null );
      {if (true) return new ArrayAllocationExpression( type, exprs, p3 );}
    } else if (jj_2_53(2147483647)) {
      label_50:
      while (true) {
        jj_consume_token(LBRACKET);
        p1 = Expression(env);
                                   exprs.add( p1 );
        jj_consume_token(RBRACKET);
        if ((getToken( 1 ).kind == LBRACKET
                            && getToken( 2 ).kind != RBRACKET)) {
          ;
        } else {
          break label_50;
        }
      }
      p2 = EmptyBracketsOpt();
      for (int i = 0; i < p2; ++i)  exprs.add( null );
      {if (true) return new ArrayAllocationExpression( type, exprs );}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StatementList BlockedBody(Environment env) throws ParseException {
    StatementList               p1;
    jj_consume_token(LBRACE);
    p1 = BlockOrStatementListOpt(env);
    jj_consume_token(RBRACE);
      {if (true) return p1;}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  final public Statement Statement(Environment env) throws ParseException {
    Statement                   p1;
    if (jj_2_54(2147483647)) {
      p1 = LabeledStatement(env);
      {if (true) return p1;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        p1 = Block(env);
      {if (true) return p1;}
        break;
      case SEMICOLON:
        p1 = EmptyStatement(env);
      {if (true) return p1;}
        break;
      case SWITCH:
        p1 = SwitchStatement(env);
      {if (true) return p1;}
        break;
      case IF:
        p1 = IfStatement(env);
      {if (true) return p1;}
        break;
      case WHILE:
        p1 = WhileStatement(env);
      {if (true) return p1;}
        break;
      case DO:
        p1 = DoWhileStatement(env);
      {if (true) return p1;}
        break;
      case FOR:
        p1 = ForStatement(env);
      {if (true) return p1;}
        break;
      case BREAK:
        p1 = BreakStatement(env);
      {if (true) return p1;}
        break;
      case CONTINUE:
        p1 = ContinueStatement(env);
      {if (true) return p1;}
        break;
      case RETURN:
        p1 = ReturnStatement(env);
      {if (true) return p1;}
        break;
      case THROW:
        p1 = ThrowStatement(env);
      {if (true) return p1;}
        break;
      case SYNCHRONIZED:
        p1 = SynchronizedStatement(env);
      {if (true) return p1;}
        break;
      case TRY:
        p1 = TryStatement(env);
      {if (true) return p1;}
        break;
      default:
        if (jj_2_55(1)) {
          p1 = ExpressionStatement(env);
      {if (true) return p1;}
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public LabeledStatement LabeledStatement(Environment env) throws ParseException {
    String                      p1;
    Statement                   p2;

    DebugOut.println( "#LabeledStatement()" );
    p1 = Identifier();
    jj_consume_token(COLON);
    p2 = Statement(env);
      {if (true) return new LabeledStatement( p1, p2 );}
    throw new Error("Missing return statement in function");
  }

  final public Block Block(Environment env) throws ParseException {
    StatementList               p1;
    DebugOut.println( "#Block()" );
    jj_consume_token(LBRACE);
    p1 = BlockOrStatementListOpt(env);
    jj_consume_token(RBRACE);
      {if (true) return new Block( p1 );}
    throw new Error("Missing return statement in function");
  }

  final public StatementList BlockOrStatementListOpt(Environment env) throws ParseException {
    StatementList               result = new StatementList();
    StatementList               p1;
    if ((getToken( 1 ).kind != RBRACE
                   && getToken( 1 ).kind != EOF
                   && getToken( 1 ).kind != CASE
                   && getToken( 1 ).kind != _DEFAULT )) {
      label_51:
      while (true) {
        p1 = BlockOrStatement(env);
          result.addAll( p1 );
        if ((getToken( 1 ).kind != RBRACE
                         && getToken( 1 ).kind != EOF
                         && getToken( 1 ).kind != CASE
                         && getToken( 1 ).kind != _DEFAULT )) {
          ;
        } else {
          break label_51;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public StatementList BlockOrStatement(Environment env) throws ParseException {
    Statement                   p1;
    StatementList               p2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      p1 = UnmodifiedClassDeclaration(new ClassEnvironment( env ));
      {if (true) return new StatementList( p1 );}
      break;
    default:
      if (LocalVariableDeclarationLookahead( env )) {
        p2 = LocalVariableDeclaration(env);
        jj_consume_token(SEMICOLON);
      {if (true) return p2;}
      } else if (jj_2_56(1)) {
        p1 = Statement(env);
      {if (true) return new StatementList( p1 );}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public StatementList LocalVariableDeclaration(Environment env) throws ParseException {
    StatementList               result = new StatementList();
    ModifierList                p1;
    TypeName                    p2;
    VariableDeclarator  p3;
    TypeName                    tspec;
    String                      vname;
    VariableInitializer vinit;
    DebugOut.println( "#LocalVariableDeclaration()" );
    p1 = VariableModifiersOpt(env);
    p2 = Type(env);
    p3 = VariableDeclarator(env);
                tspec = (TypeName) p2.makeRecursiveCopy();
                tspec.addDimension( p3.getDimension() );
                vname = p3.getVariable();
                vinit = p3.getInitializer();
                result.add( new VariableDeclaration( p1, tspec, vname, vinit ) );
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_52;
      }
      jj_consume_token(COMMA);
      p3 = VariableDeclarator(env);
                    tspec = (TypeName) p2.makeRecursiveCopy();
                    tspec.addDimension( p3.getDimension() );
                    vname = p3.getVariable();
                    vinit = p3.getInitializer();
                    result.add( new VariableDeclaration( p1, tspec, vname, vinit ) );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ModifierList VariableModifiersOpt(Environment env) throws ParseException {
    ModifierList                result = new ModifierList();
    int                         p1;
    String                      p2;
    if (modifierCheck( env, getToken( 1 ) )) {
      label_53:
      while (true) {
        if (jj_2_57(2147483647)) {
          p1 = Modifier();
              result.add( p1 );
        } else if (OpenJavaModifierLookahead( env )) {
          p2 = OpenJavaModifier();
              result.add( p2 );
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (ModifierLookahead( env )) {
          ;
        } else {
          break label_53;
        }
      }
      {if (true) return result;}
    } else {
      E();
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public EmptyStatement EmptyStatement(Environment env) throws ParseException {
    DebugOut.println( "#EmptyStatement()" );
    jj_consume_token(SEMICOLON);
      {if (true) return new EmptyStatement();}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionStatement ExpressionStatement(Environment env) throws ParseException {
    Expression                  p1;

    DebugOut.println( "#ExpressionStatement()" );
    p1 = StatementExpression(env);
    jj_consume_token(SEMICOLON);
      {if (true) return new ExpressionStatement( p1 );}
    throw new Error("Missing return statement in function");
  }

  final public Expression StatementExpression(Environment env) throws ParseException {
    Expression                  p1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      p1 = PreIncrementDecrementExpression(env);
      {if (true) return p1;}
      break;
    default:
      if (AssignmentLookahead()) {
        p1 = AssignmentExpression(env);
      {if (true) return p1;}
      } else if (jj_2_58(1)) {
        p1 = PostfixExpression(env);
      {if (true) return p1;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SwitchStatement SwitchStatement(Environment env) throws ParseException {
    Expression                  p1;
    Expression                  p2;
    StatementList               p3;
    CaseGroupList  cplist = new CaseGroupList();
    ExpressionList  exprs;

    DebugOut.println( "#SwitchStatement()" );
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    p1 = Expression(env);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_54:
    while (true) {
      if (jj_2_59(2147483647)) {
        ;
      } else {
        break label_54;
      }
           exprs = new ExpressionList();
      label_55:
      while (true) {
        p2 = SwitchLabel(env);
                                   exprs.add( p2 );
        if (jj_2_60(2147483647)) {
          ;
        } else {
          break label_55;
        }
      }
      p3 = BlockOrStatementListOpt(env);
           cplist.add( new CaseGroup( exprs, p3 ) );
    }
    jj_consume_token(RBRACE);
       {if (true) return new SwitchStatement( p1, cplist );}
    throw new Error("Missing return statement in function");
  }

  final public Expression SwitchLabel(Environment env) throws ParseException {
    Expression                  p1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      p1 = Expression(env);
      jj_consume_token(COLON);
      {if (true) return p1;}
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
      {if (true) return null;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement(Environment env) throws ParseException {
    IfStatement                 result;
    Expression                  p1;
    StatementList               p2;
    Statement                   p3;
    StatementList  true_part;
    StatementList  false_part = null;

    DebugOut.println( "#IfStatement()" );
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    p1 = Expression(env);
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      p2 = BlockedBody(env);
          true_part = p2;
      break;
    default:
      if (jj_2_61(1)) {
        p3 = Statement(env);
          true_part = new StatementList( p3 );
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        p2 = BlockedBody(env);
              false_part = p2;
        break;
      default:
        if (jj_2_62(1)) {
          p3 = Statement(env);
              false_part = new StatementList( p3 );
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      ;
    }
      {if (true) return new IfStatement( p1, true_part, false_part );}
    throw new Error("Missing return statement in function");
  }

  final public WhileStatement WhileStatement(Environment env) throws ParseException {
    Expression                  p1;
    StatementList               p2;
    Statement                   p3;
    StatementList  body;

    DebugOut.println( "#WhileStatement()" );
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    p1 = Expression(env);
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      p2 = BlockedBody(env);
          body = p2;
      break;
    default:
      if (jj_2_63(1)) {
        p3 = Statement(env);
          body = new StatementList( p3 );
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return new WhileStatement( p1, body );}
    throw new Error("Missing return statement in function");
  }

  final public DoWhileStatement DoWhileStatement(Environment env) throws ParseException {
    StatementList               p1;
    Statement                   p2;
    Expression                  p3;
    StatementList  body;

    DebugOut.println( "#DoWhileStatement()" );
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      p1 = BlockedBody(env);
          body = p1;
      break;
    default:
      if (jj_2_64(1)) {
        p2 = Statement(env);
          body = new StatementList( p2 );
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    p3 = Expression(env);
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
      {if (true) return new DoWhileStatement( body, p3 );}
    throw new Error("Missing return statement in function");
  }

  final public ForStatement ForStatement(Environment env) throws ParseException {
    ForStatement                        result;
    TypeName                            p1 = null;
    VariableDeclarator[]        p2 = null;
    ExpressionList                      p3 = null;
    Expression                          p4 = null;
    ExpressionList                      p5 = null;
    StatementList                       p6;
    Statement                           p7;
    StatementList                       body;
    String                                      typeString = "";
    String                                      identifierString = "";
    String                                      modifierString = "";
    int                                         modifierInt = -1;

    DebugOut.println( "#ForStatement()" );
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    if (jj_2_66(2147483647)) {
      label_56:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case FINAL:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case AT:
          ;
          break;
        default:
          break label_56;
        }
        modifierInt = Modifier();
                switch (modifierInt){
                        case ModifierList.ABSTRACT:     modifierString += "abstract "; break;
                        case ModifierList.FINAL:        modifierString += "final ";    break;
                        case ModifierList.PUBLIC:       modifierString += "public ";   break;
                        case ModifierList.PRIVATE:      modifierString += "private ";  break;
                        case ModifierList.PROTECTED:    modifierString += "protected "; break;
                        case ModifierList.STATIC:       modifierString += "static ";    break;
                        case ModifierList.TRANSIENT:    modifierString += "transient "; break;
                        case ModifierList.VOLATILE:     modifierString += "volatile ";  break;
                        case ModifierList.NATIVE:               modifierString += "native ";    break;
                        case ModifierList.SYNCHRONIZED: modifierString += "synchronized "; break;
                        default:                                                modifierString = "";             break;
                }
      }
      typeString = TypeWithoutSemantics();
          p1 = new TypeName(typeString);
      identifierString = Identifier();
      jj_consume_token(COLON);
      p4 = Expression(env);
    } else if (jj_2_67(1)) {
      if ((getToken( 1 ).kind != SEMICOLON)) {
        if (LocalVariableDeclarationLookaheadWithoutEnv( )) {
          p1 = Type(env);
          p2 = VariableDeclaratorList(env);
        } else if (jj_2_65(1)) {
          p3 = StatementExpressionList(env);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      jj_consume_token(SEMICOLON);
      if ((getToken( 1 ).kind != SEMICOLON)) {
        p4 = Expression(env);
      } else {
        ;
      }
      jj_consume_token(SEMICOLON);
      if ((getToken( 1 ).kind != RPAREN)) {
        p5 = StatementExpressionList(env);
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      p6 = BlockedBody(env);
          body = p6;
      break;
    default:
      if (jj_2_68(1)) {
        p7 = Statement(env);
          body = new StatementList( p7 );
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
            if( p2 == null && p3 == null && p5 == null){
                        result = new ForStatement (modifierString, p1, identifierString, p4, body);
                        {if (true) return result;}
            }
                if (p1 != null) {
                    result = new ForStatement( p1, p2, p4, p5, body );
                } else if (p3 != null) {
                    result = new ForStatement( p3, p4, p5, body );
                } else {
                    result = new ForStatement( new ExpressionList(), p4, p5, body );
                }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarator[] VariableDeclaratorList(Environment env) throws ParseException {
    VariableDeclarator[]        result;
    VariableDeclarator          p1;
    Vector v = new Vector();

    DebugOut.println( "#LocalVariableDeclaration()" );
    p1 = VariableDeclarator(env);
      v.addElement( p1 );
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_57;
      }
      jj_consume_token(COMMA);
      p1 = VariableDeclarator(env);
          v.addElement( p1 );
    }
        result = new VariableDeclarator[v.size()];
        for (int i = 0; i < result.length; ++i) {
            result[i] = (VariableDeclarator) v.elementAt( i );
        }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList StatementExpressionList(Environment env) throws ParseException {
    ExpressionList              result = new ExpressionList();
    Expression                  p1;
    p1 = StatementExpression(env);
      result.add( p1 );
    label_58:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_58;
      }
      jj_consume_token(COMMA);
      p1 = StatementExpression(env);
          result.add( p1 );
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public BreakStatement BreakStatement(Environment env) throws ParseException {
    BreakStatement              result;
    String                      p1 = null;

    DebugOut.println( "#BreakStatement()" );
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METACLASS:
    case IDENTIFIER:
      p1 = Identifier();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
        if (p1 != null) {
            result = new BreakStatement( p1 );
        } else {
            result = new BreakStatement();
        }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ContinueStatement ContinueStatement(Environment env) throws ParseException {
    ContinueStatement           result;
    String                      p1 = null;

    DebugOut.println( "#ContinueStatement()" );
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METACLASS:
    case IDENTIFIER:
      p1 = Identifier();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
        if (p1 != null) {
            result = new ContinueStatement( p1 );
        } else {
            result = new ContinueStatement();
        }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStatement ReturnStatement(Environment env) throws ParseException {
    ReturnStatement             result;
    Expression                  p1 = null;

    DebugOut.println( "#ReturnStatement()" );
    jj_consume_token(RETURN);
    if ((getToken(1).kind != SEMICOLON)) {
      p1 = Expression(env);
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
        if (p1 != null) {
            result = new ReturnStatement( p1 );
        } else {
            result = new ReturnStatement();
        }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ThrowStatement ThrowStatement(Environment env) throws ParseException {
    Statement                   result;
    Expression                  p1;

    DebugOut.println( "#ThrowStatement()" );
    jj_consume_token(THROW);
    p1 = Expression(env);
    jj_consume_token(SEMICOLON);
      {if (true) return new ThrowStatement( p1 );}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizedStatement SynchronizedStatement(Environment env) throws ParseException {
    Expression                  p1;
    StatementList               p2;

    DebugOut.println( "#SynchronizedStatement()" );
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    p1 = Expression(env);
    jj_consume_token(RPAREN);
    p2 = BlockedBody(env);
      {if (true) return new SynchronizedStatement( p1, p2 );}
    throw new Error("Missing return statement in function");
  }

  final public TryStatement TryStatement(Environment base_env) throws ParseException {
    Environment                 env = new ClosedEnvironment( base_env );
    TryStatement                result;
    StatementList               p1;
    Parameter                   p2;
    StatementList               p3;
    StatementList               p4 = null;
    CatchList  catches = new CatchList();

    DebugOut.println( "#TryStatement()" );
    jj_consume_token(TRY);
    p1 = BlockedBody(env);
    label_59:
    while (true) {
      if (jj_2_69(2147483647)) {
        ;
      } else {
        break label_59;
      }
           env = new ClosedEnvironment( base_env );
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      p2 = FormalParameter(env);
      jj_consume_token(RPAREN);
      p3 = BlockedBody(env);
           catches.add( new CatchBlock( p2, p3 ) );
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      p4 = BlockedBody(new ClosedEnvironment( base_env ));
      break;
    default:
      ;
    }
      result = new TryStatement( p1, catches, p4 );
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public void RUNSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                    ((MyToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                    ((MyToken)getToken(1)).realKind == RSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

/* Annotation syntax follows. */
/*
 * will be updated later
 */
  final public void Annotation() throws ParseException {
    if (jj_2_70(2147483647)) {
      NormalAnnotation();
    } else if (jj_2_71(2147483647)) {
      SingleMemberAnnotation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        MarkerAnnotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NormalAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      MemberValuePairs();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void MarkerAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
  }

  final public void SingleMemberAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    MemberValue();
    jj_consume_token(RPAREN);
  }

  final public void MemberValuePairs() throws ParseException {
    MemberValuePair();
    label_60:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_60;
      }
      jj_consume_token(COMMA);
      MemberValuePair();
    }
  }

  final public void MemberValuePair() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    MemberValue();
  }

  final public void MemberValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      Annotation();
      break;
    case LBRACE:
      MemberValueArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case METACLASS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ConditionalExpressionWithoutSematics();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MemberValueArrayInitializer() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case METACLASS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case AT:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      MemberValue();
      label_61:
      while (true) {
        if (jj_2_72(2)) {
          ;
        } else {
          break label_61;
        }
        jj_consume_token(COMMA);
        MemberValue();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

/*
 * Expression syntax follows.
 */
  final public void ExpressionWithoutSematics() throws ParseException {
    ConditionalExpressionWithoutSematics();
    if (jj_2_73(2)) {
      AssignmentOperatorWithoutSematics();
      ExpressionWithoutSematics();
    } else {
      ;
    }
  }

  final public void AssignmentOperatorWithoutSematics() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConditionalExpressionWithoutSematics() throws ParseException {
    ConditionalOrExpressionWithoutSematics();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      ExpressionWithoutSematics();
      jj_consume_token(COLON);
      ExpressionWithoutSematics();
      break;
    default:
      ;
    }
  }

  final public void ConditionalOrExpressionWithoutSematics() throws ParseException {
    ConditionalAndExpressionWithoutSematics();
    label_62:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        break label_62;
      }
      jj_consume_token(SC_OR);
      ConditionalAndExpressionWithoutSematics();
    }
  }

  final public void ConditionalAndExpressionWithoutSematics() throws ParseException {
    InclusiveOrExpressionWithoutSematics();
    label_63:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        break label_63;
      }
      jj_consume_token(SC_AND);
      InclusiveOrExpressionWithoutSematics();
    }
  }

  final public void InclusiveOrExpressionWithoutSematics() throws ParseException {
    ExclusiveOrExpressionWithoutSematics();
    label_64:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_64;
      }
      jj_consume_token(BIT_OR);
      ExclusiveOrExpressionWithoutSematics();
    }
  }

  final public void ExclusiveOrExpressionWithoutSematics() throws ParseException {
    AndExpressionWithoutSematics();
    label_65:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        break label_65;
      }
      jj_consume_token(XOR);
      AndExpressionWithoutSematics();
    }
  }

  final public void AndExpressionWithoutSematics() throws ParseException {
    EqualityExpressionWithoutSematics();
    label_66:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_66;
      }
      jj_consume_token(BIT_AND);
      EqualityExpressionWithoutSematics();
    }
  }

  final public void EqualityExpressionWithoutSematics() throws ParseException {
    InstanceOfExpressionWithoutSematics();
    label_67:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_67;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpressionWithoutSematics();
    }
  }

  final public void InstanceOfExpressionWithoutSematics() throws ParseException {
    RelationalExpressionWithoutSematics();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      TypeWithoutSematics();
      break;
    default:
      ;
    }
  }

  final public void RelationalExpressionWithoutSematics() throws ParseException {
    ShiftExpressionWithoutSematics();
    label_68:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GE:
      case GT:
        ;
        break;
      default:
        break label_68;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpressionWithoutSematics();
    }
  }

  final public void ShiftExpressionWithoutSematics() throws ParseException {
    AdditiveExpressionWithoutSematics();
    label_69:
    while (true) {
      if (jj_2_74(1)) {
        ;
      } else {
        break label_69;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
        break;
      default:
        if (jj_2_75(1)) {
          RSIGNEDSHIFT();
        } else if (jj_2_76(1)) {
          RUNSIGNEDSHIFT();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      AdditiveExpressionWithoutSematics();
    }
  }

  final public void AdditiveExpressionWithoutSematics() throws ParseException {
    MultiplicativeExpressionWithoutSematics();
    label_70:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_70;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpressionWithoutSematics();
    }
  }

  final public void MultiplicativeExpressionWithoutSematics() throws ParseException {
    UnaryExpressionWithoutSematics();
    label_71:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        break label_71;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case REM:
        jj_consume_token(REM);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpressionWithoutSematics();
    }
  }

  final public void UnaryExpressionWithoutSematics() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpressionWithoutSematics();
      break;
    case INCR:
      PreIncrementExpressionWithoutSematics();
      break;
    case DECR:
      PreDecrementExpressionWithoutSematics();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case METACLASS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      UnaryExpressionNotPlusMinusWithoutSematics();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncrementExpressionWithoutSematics() throws ParseException {
    jj_consume_token(INCR);
    PrimaryExpressionWithoutSematics();
  }

  final public void PreDecrementExpressionWithoutSematics() throws ParseException {
    jj_consume_token(DECR);
    PrimaryExpressionWithoutSematics();
  }

  final public void UnaryExpressionNotPlusMinusWithoutSematics() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpressionWithoutSematics();
      break;
    default:
      if (jj_2_77(2147483647)) {
        CastExpressionWithoutSematics();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case METACLASS:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          PostfixExpressionWithoutSematics();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookaheadWithoutSematics() throws ParseException {
    if (jj_2_78(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_79(2147483647)) {
      jj_consume_token(LPAREN);
      TypeWithoutSematics();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        TypeWithoutSematics();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          LiteralWithoutSematics();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PostfixExpressionWithoutSematics() throws ParseException {
    PrimaryExpressionWithoutSematics();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
  }

  final public void CastExpressionWithoutSematics() throws ParseException {
    if (jj_2_80(2147483647)) {
      jj_consume_token(LPAREN);
      TypeWithoutSematics();
      jj_consume_token(RPAREN);
      UnaryExpressionWithoutSematics();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        TypeWithoutSematics();
        jj_consume_token(RPAREN);
        UnaryExpressionNotPlusMinusWithoutSematics();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PrimaryExpressionWithoutSematics() throws ParseException {
    PrimaryPrefixWithoutSematics();
    label_72:
    while (true) {
      if (jj_2_81(2)) {
        ;
      } else {
        break label_72;
      }
      PrimarySuffixWithoutSematics();
    }
  }

  final public void MemberSelectorWithoutSematics() throws ParseException {
    jj_consume_token(DOT);
    TypeArguments();
    jj_consume_token(IDENTIFIER);
  }

  final public void PrimaryPrefixWithoutSematics() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      LiteralWithoutSematics();
      break;
    default:
      if (jj_2_82(2147483647)) {
        label_73:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            break label_73;
          }
          jj_consume_token(IDENTIFIER);
          jj_consume_token(DOT);
        }
        jj_consume_token(THIS);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUPER:
          jj_consume_token(SUPER);
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
          break;
        default:
          if (jj_2_83(2147483647)) {
            ClassOrInterfaceTypeWithoutSematics();
            jj_consume_token(DOT);
            jj_consume_token(SUPER);
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LPAREN:
              jj_consume_token(LPAREN);
              ExpressionWithoutSematics();
              jj_consume_token(RPAREN);
              break;
            case NEW:
              AllocationExpressionWithoutSematics();
              break;
            default:
              if (jj_2_84(2147483647)) {
                ResultType();
                jj_consume_token(DOT);
                jj_consume_token(CLASS);
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case METACLASS:
                case IDENTIFIER:
                  Name();
                  break;
                default:
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    }
  }

  final public void PrimarySuffixWithoutSematics() throws ParseException {
    if (jj_2_85(2147483647)) {
      jj_consume_token(DOT);
      jj_consume_token(SUPER);
    } else if (jj_2_86(2147483647)) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
    } else if (jj_2_87(2)) {
      jj_consume_token(DOT);
      AllocationExpressionWithoutSematics();
    } else if (jj_2_88(3)) {
      MemberSelectorWithoutSematics();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        ExpressionWithoutSematics();
        jj_consume_token(RBRACKET);
        break;
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        break;
      case LPAREN:
        ArgumentsWithoutSematics();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LiteralWithoutSematics() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case FALSE:
    case TRUE:
      BooleanLiteralWithoutSematics();
      break;
    case NULL:
      NullLiteralWithoutSematics();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteralWithoutSematics() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NullLiteralWithoutSematics() throws ParseException {
    jj_consume_token(NULL);
  }

  final public void ArgumentsWithoutSematics() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case METACLASS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ArgumentListWithoutSematics();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void ArgumentListWithoutSematics() throws ParseException {
    ExpressionWithoutSematics();
    label_74:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_74;
      }
      jj_consume_token(COMMA);
      ExpressionWithoutSematics();
    }
  }

  final public void AllocationExpressionWithoutSematics() throws ParseException {
    if (jj_2_89(2)) {
      jj_consume_token(NEW);
      PrimitiveType();
      ArrayDimsAndInitsWithoutSematics();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        ClassOrInterfaceTypeWithoutSematics();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          TypeArguments();
          break;
        default:
          ;
        }
        ArrayDimsAndInitsWithoutSematics();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ClassOrInterfaceBodyWithoutSematics(false);
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimsAndInitsWithoutSematics() throws ParseException {
    if (jj_2_92(2)) {
      label_75:
      while (true) {
        jj_consume_token(LBRACKET);
        ExpressionWithoutSematics();
        jj_consume_token(RBRACKET);
        if (jj_2_90(2)) {
          ;
        } else {
          break label_75;
        }
      }
      label_76:
      while (true) {
        if (jj_2_91(2)) {
          ;
        } else {
          break label_76;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        label_77:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            break label_77;
          }
        }
        ArrayInitializerWithoutSematics();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ResultType() throws ParseException {
    TypeWithoutSematics();
  }

  final public void VariableInitializerWithoutSematics() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ArrayInitializerWithoutSematics();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case METACLASS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ExpressionWithoutSematics();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayInitializerWithoutSematics() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case METACLASS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      VariableInitializerWithoutSematics();
      label_78:
      while (true) {
        if (jj_2_93(2)) {
          ;
        } else {
          break label_78;
        }
        jj_consume_token(COMMA);
        VariableInitializerWithoutSematics();
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void ClassOrInterfaceTypeWithoutSematics() throws ParseException {
    jj_consume_token(IDENTIFIER);
    if (jj_2_94(2)) {
      TypeArguments();
    } else {
      ;
    }
    label_79:
    while (true) {
      if (jj_2_95(2)) {
        ;
      } else {
        break label_79;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      if (jj_2_96(2)) {
        TypeArguments();
      } else {
        ;
      }
    }
  }

/*
 * The code below related to ClassOrInterfaceBody is copied from Java 1.5.jj for the use of ClassOrInterfaceBody in AllocationExpressionWithoutSematics
 */
  final public void ClassOrInterfaceBodyWithoutSematics(boolean isInterface) throws ParseException {
    jj_consume_token(LBRACE);
    label_80:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case METACLASS:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case LT:
        ;
        break;
      default:
        break label_80;
      }
      ClassOrInterfaceBodyDeclarationWithoutSematics(isInterface);
    }
    jj_consume_token(RBRACE);
  }

  final public void ClassOrInterfaceBodyDeclarationWithoutSematics(boolean isInterface) throws ParseException {
   boolean isNestedInterface = false;
   int modifiers;
    if (jj_2_98(2)) {
      Initializer();
     if (isInterface)
        {if (true) throw new ParseException("An interface cannot have initializers");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case METACLASS:
      case IDENTIFIER:
      case AT:
      case LT:
        modifiers = Modifiers();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclarationWithoutSematics(modifiers);
          break;
        default:
          if (jj_2_97(2147483647)) {
            FieldDeclarationWithoutSematics(modifiers);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case METACLASS:
            case IDENTIFIER:
            case LT:
              MethodDeclarationWithoutSematics(modifiers);
              break;
            case AT:
              AnnotationTypeDeclarationWithoutSematics(modifiers);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Initializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      ;
    }
    BlockWithoutSematics();
  }

  final public void BlockWithoutSematics() throws ParseException {
    jj_consume_token(LBRACE);
    label_81:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case METACLASS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_81;
      }
      BlockStatementWithoutSematics();
    }
    jj_consume_token(RBRACE);
  }

  final public void BlockStatementWithoutSematics() throws ParseException {
    if (jj_2_99(2147483647)) {
      LocalVariableDeclarationWithoutSematics();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case METACLASS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        StatementWithoutSematics();
        break;
      case CLASS:
      case INTERFACE:
        ClassOrInterfaceDeclarationWithoutSematics(0);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LocalVariableDeclarationWithoutSematics() throws ParseException {
    Modifiers();
    TypeWithoutSematics();
    VariableDeclaratorWithoutSematics();
    label_82:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_82;
      }
      jj_consume_token(COMMA);
      VariableDeclaratorWithoutSematics();
    }
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public int Modifiers() throws ParseException {
   int modifiers = 0;
    label_83:
    while (true) {
      if (jj_2_100(2)) {
        ;
      } else {
        break label_83;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
              modifiers |= ModifierList.PUBLIC;
        break;
      case STATIC:
        jj_consume_token(STATIC);
              modifiers |= ModifierList.STATIC;
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
                 modifiers |= ModifierList.PROTECTED;
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
               modifiers |= ModifierList.PRIVATE;
        break;
      case FINAL:
        jj_consume_token(FINAL);
             modifiers |= ModifierList.FINAL;
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
                modifiers |= ModifierList.ABSTRACT;
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
                    modifiers |= ModifierList.SYNCHRONIZED;
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
              modifiers |= ModifierList.NATIVE;
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
                 modifiers |= ModifierList.TRANSIENT;
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
                modifiers |= ModifierList.VOLATILE;
        break;
      case AT:
        Annotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return modifiers;}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  final public void StatementWithoutSematics() throws ParseException {
    if (jj_2_101(2)) {
      LabeledStatementWithoutSematics();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        AssertStatementWithoutSematics();
        break;
      case LBRACE:
        BlockWithoutSematics();
        break;
      case SEMICOLON:
        EmptyStatementWithoutSematics();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case METACLASS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpressionWithoutSematics();
        jj_consume_token(SEMICOLON);
        break;
      case SWITCH:
        SwitchStatementWithoutSematics();
        break;
      case IF:
        IfStatementWithoutSematics();
        break;
      case WHILE:
        WhileStatementWithoutSematics();
        break;
      case DO:
        DoStatementWithoutSematics();
        break;
      case FOR:
        ForStatementWithoutSematics();
        break;
      case BREAK:
        BreakStatementWithoutSematics();
        break;
      case CONTINUE:
        ContinueStatementWithoutSematics();
        break;
      case RETURN:
        ReturnStatementWithoutSematics();
        break;
      case THROW:
        ThrowStatementWithoutSematics();
        break;
      case SYNCHRONIZED:
        SynchronizedStatementWithoutSematics();
        break;
      case TRY:
        TryStatementWithoutSematics();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AssertStatementWithoutSematics() throws ParseException {
    jj_consume_token(ASSERT);
    ExpressionWithoutSematics();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      ExpressionWithoutSematics();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void LabeledStatementWithoutSematics() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    StatementWithoutSematics();
  }

  final public void EmptyStatementWithoutSematics() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public void StatementExpressionWithoutSematics() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      PreIncrementExpressionWithoutSematics();
      break;
    case DECR:
      PreDecrementExpressionWithoutSematics();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case METACLASS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      PrimaryExpressionWithoutSematics();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          AssignmentOperatorWithoutSematics();
          ExpressionWithoutSematics();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SwitchStatementWithoutSematics() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    ExpressionWithoutSematics();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_84:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        break label_84;
      }
      SwitchLabelWithoutSematics();
      label_85:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case METACLASS:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case INCR:
        case DECR:
          ;
          break;
        default:
          break label_85;
        }
        BlockStatementWithoutSematics();
      }
    }
    jj_consume_token(RBRACE);
  }

  final public void SwitchLabelWithoutSematics() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      ExpressionWithoutSematics();
      jj_consume_token(COLON);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatementWithoutSematics() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    ExpressionWithoutSematics();
    jj_consume_token(RPAREN);
    StatementWithoutSematics();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      StatementWithoutSematics();
      break;
    default:
      ;
    }
  }

  final public void WhileStatementWithoutSematics() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    ExpressionWithoutSematics();
    jj_consume_token(RPAREN);
    StatementWithoutSematics();
  }

  final public void DoStatementWithoutSematics() throws ParseException {
    jj_consume_token(DO);
    StatementWithoutSematics();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    ExpressionWithoutSematics();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

  final public void ForStatementWithoutSematics() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    if (jj_2_102(2147483647)) {
      Modifiers();
      TypeWithoutSematics();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      ExpressionWithoutSematics();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SUPER:
      case SYNCHRONIZED:
      case THIS:
      case TRANSIENT:
      case TRUE:
      case VOID:
      case VOLATILE:
      case METACLASS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case SUPER:
        case SYNCHRONIZED:
        case THIS:
        case TRANSIENT:
        case TRUE:
        case VOID:
        case VOLATILE:
        case METACLASS:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case AT:
        case INCR:
        case DECR:
          ForInitWithoutSematics();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case METACLASS:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ExpressionWithoutSematics();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case METACLASS:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          ForUpdateWithoutSematics();
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
    StatementWithoutSematics();
  }

  final public void ForInitWithoutSematics() throws ParseException {
    if (jj_2_103(2147483647)) {
      LocalVariableDeclarationWithoutSematics();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case METACLASS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpressionListWithoutSematics();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void StatementExpressionListWithoutSematics() throws ParseException {
    StatementExpressionWithoutSematics();
    label_86:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_86;
      }
      jj_consume_token(COMMA);
      StatementExpressionWithoutSematics();
    }
  }

  final public void ForUpdateWithoutSematics() throws ParseException {
    StatementExpressionListWithoutSematics();
  }

  final public void BreakStatementWithoutSematics() throws ParseException {
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ContinueStatementWithoutSematics() throws ParseException {
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ReturnStatementWithoutSematics() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case METACLASS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ExpressionWithoutSematics();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ThrowStatementWithoutSematics() throws ParseException {
    jj_consume_token(THROW);
    ExpressionWithoutSematics();
    jj_consume_token(SEMICOLON);
  }

  final public void SynchronizedStatementWithoutSematics() throws ParseException {
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    ExpressionWithoutSematics();
    jj_consume_token(RPAREN);
    BlockWithoutSematics();
  }

  final public void TryStatementWithoutSematics() throws ParseException {
    jj_consume_token(TRY);
    BlockWithoutSematics();
    label_87:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        break label_87;
      }
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      FormalParameterWithoutSematics();
      jj_consume_token(RPAREN);
      BlockWithoutSematics();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      BlockWithoutSematics();
      break;
    default:
      ;
    }
  }

  final public void FormalParameterWithoutSematics() throws ParseException {
    Modifiers();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
    case AT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case AT:
        Annotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
    TypeWithoutSematics();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
      break;
    default:
      ;
    }
    VariableDeclaratorIdWithoutSematics();
  }

  final public void FieldDeclarationWithoutSematics(int modifiers) throws ParseException {
    TypeWithoutSematics();
    VariableDeclaratorWithoutSematics();
    label_88:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_88;
      }
      jj_consume_token(COMMA);
      VariableDeclaratorWithoutSematics();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void VariableDeclaratorWithoutSematics() throws ParseException {
    VariableDeclaratorIdWithoutSematics();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      VariableInitializerWithoutSematics();
      break;
    default:
      ;
    }
  }

  final public void VariableDeclaratorIdWithoutSematics() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_89:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        break label_89;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

/* Annotation Types. */
  final public void AnnotationTypeDeclarationWithoutSematics(int modifiers) throws ParseException {
    jj_consume_token(AT);
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFIER);
    AnnotationTypeBodyWithoutSematics();
  }

  final public void AnnotationTypeBodyWithoutSematics() throws ParseException {
    jj_consume_token(LBRACE);
    label_90:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case METACLASS:
      case IDENTIFIER:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_90;
      }
      AnnotationTypeMemberDeclarationWithoutSematics();
    }
    jj_consume_token(RBRACE);
  }

  final public void AnnotationTypeMemberDeclarationWithoutSematics() throws ParseException {
   int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOID:
    case VOLATILE:
    case METACLASS:
    case IDENTIFIER:
    case AT:
      modifiers = Modifiers();
      if (jj_2_104(2147483647)) {
        FieldDeclarationWithoutSematics(modifiers);
      } else if (jj_2_105(2147483647)) {
        ClassOrInterfaceDeclarationWithoutSematics(modifiers);
      } else if (jj_2_106(2147483647)) {
        AnnotationTypeDeclarationWithoutSematics(modifiers);
      } else if (jj_2_107(2147483647)) {
        TypeWithoutSematics();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _DEFAULT:
          DefaultValue();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassOrInterfaceDeclarationWithoutSematics(int modifiers) throws ParseException {
   boolean isInterface = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
                            isInterface = true;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParametersWithoutSematics();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      ExtendsListWithoutSematics(isInterface);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      ImplementsListWithoutSematics(isInterface);
      break;
    default:
      ;
    }
    ClassOrInterfaceBodyWithoutSematics(isInterface);
  }

  final public void ExtendsListWithoutSematics(boolean isInterface) throws ParseException {
   boolean extendsMoreThanOne = false;
    jj_consume_token(EXTENDS);
    ClassOrInterfaceTypeWithoutSematics();
    label_91:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_91;
      }
      jj_consume_token(COMMA);
      ClassOrInterfaceTypeWithoutSematics();
                                                 extendsMoreThanOne = true;
    }
      if (extendsMoreThanOne && !isInterface)
         {if (true) throw new ParseException("A class cannot extend more than one other class");}
  }

  final public void ImplementsListWithoutSematics(boolean isInterface) throws ParseException {
    jj_consume_token(IMPLEMENTS);
    ClassOrInterfaceTypeWithoutSematics();
    label_92:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_92;
      }
      jj_consume_token(COMMA);
      ClassOrInterfaceTypeWithoutSematics();
    }
      if (isInterface)
         {if (true) throw new ParseException("An interface cannot implement other interfaces");}
  }

  final public void MethodDeclarationWithoutSematics(int modifiers) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParametersWithoutSematics();
      break;
    default:
      ;
    }
    ResultType();
    MethodDeclaratorWithoutSematics();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameListWithoutSematics();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      BlockWithoutSematics();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MethodDeclaratorWithoutSematics() throws ParseException {
    jj_consume_token(IDENTIFIER);
    FormalParametersWithoutSematics();
    label_93:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        break label_93;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

  final public void NameListWithoutSematics() throws ParseException {
    Name();
    label_94:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_94;
      }
      jj_consume_token(COMMA);
      Name();
    }
  }

  final public void TypeParametersWithoutSematics() throws ParseException {
    jj_consume_token(LT);
    TypeParameterWithoutSematics();
    label_95:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_95;
      }
      jj_consume_token(COMMA);
      TypeParameterWithoutSematics();
    }
    jj_consume_token(GT);
  }

  final public void TypeParameterWithoutSematics() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      TypeBoundWithoutSematics();
      break;
    default:
      ;
    }
  }

  final public void TypeBoundWithoutSematics() throws ParseException {
    jj_consume_token(EXTENDS);
    ClassOrInterfaceTypeWithoutSematics();
    label_96:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_96;
      }
      jj_consume_token(BIT_AND);
      ClassOrInterfaceTypeWithoutSematics();
    }
  }

  final public void FormalParametersWithoutSematics() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOID:
    case VOLATILE:
    case METACLASS:
    case IDENTIFIER:
    case AT:
      FormalParameterWithoutSematics();
      label_97:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_97;
        }
        jj_consume_token(COMMA);
        FormalParameterWithoutSematics();
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

/* Annotation Types. */
  final public void AnnotationTypeDeclaration(ClassEnvironment env) throws ParseException {
    jj_consume_token(AT);
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFIER);
    AnnotationTypeBody(env);
  }

  final public void AnnotationTypeBody(ClassEnvironment env) throws ParseException {
    jj_consume_token(LBRACE);
    label_98:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_98;
      }
      AnnotationTypeMemberDeclaration(env);
    }
    jj_consume_token(RBRACE);
  }

  final public void AnnotationTypeMemberDeclaration(ClassEnvironment env) throws ParseException {
   int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case AT:
      modifiers = Modifier();
      if (jj_2_108(2147483647)) {
        TypeWithoutSematics();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _DEFAULT:
          DefaultValue();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          UnmodifiedClassDeclaration(env);
          break;
        case INTERFACE:
          UnmodifiedInterfaceDeclaration(env);
          break;
        default:
          EnumDeclarationWithoutSematics(modifiers);
        }
      }
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefaultValue() throws ParseException {
    jj_consume_token(_DEFAULT);
    MemberValue();
  }

  final public void EnumDeclarationWithoutSematics(int modifiers) throws ParseException {
    E();
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_383() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_3R_135()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_82() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_3R_134()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_411() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_377() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_387()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_372() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) {
    jj_scanpos = xsp;
    if (jj_3R_377()) {
    jj_scanpos = xsp;
    if (jj_3R_378()) {
    jj_scanpos = xsp;
    if (jj_3R_379()) {
    jj_scanpos = xsp;
    if (jj_3R_380()) {
    jj_scanpos = xsp;
    if (jj_3R_381()) {
    jj_scanpos = xsp;
    if (jj_3R_382()) {
    jj_scanpos = xsp;
    if (jj_3R_383()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_13() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENUM)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_3R_372()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_410() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_401()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    return false;
  }

  private boolean jj_3R_409() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_406() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_409()) {
    jj_scanpos = xsp;
    if (jj_3R_410()) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_407() {
    if (jj_3R_368()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_411()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_3R_255()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_248()) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_405() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    if (jj_3R_386()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_246()) return true;
    return false;
  }

  private boolean jj_3R_408() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    }
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_3R_407()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_245()) return true;
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_3R_406()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3R_402() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_401() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_402()) {
    jj_scanpos = xsp;
    if (jj_3R_403()) {
    jj_scanpos = xsp;
    if (jj_3R_404()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) return true;
    }
    }
    if (jj_3R_375()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_368()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_100()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_368()) return true;
    return false;
  }

  private boolean jj_3R_398() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    }
    }
    if (jj_3R_371()) return true;
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_3R_401()) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_3R_318()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3_55()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_3R_367()) return true;
    return false;
  }

  private boolean jj_3R_388() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    if (jj_3R_359()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3R_394() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_390() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_394()) {
    jj_scanpos = xsp;
    if (jj_3R_395()) {
    jj_scanpos = xsp;
    if (jj_3R_396()) {
    jj_scanpos = xsp;
    if (jj_3R_397()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_343()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_386() {
    if (jj_3R_390()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_408()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_3R_386()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_405()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_313()) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_375()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_301()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_178()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_3R_371()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_398()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_3R_365()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_391()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_3R_359()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_388()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_108() {
    if (jj_3R_131()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_479() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_3R_343()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_384()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_468() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_322()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_373()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_459() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_458()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_3R_313()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_369()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_3R_301()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_363()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_296() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) return true;
    }
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_3R_280()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_357()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_204() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_254()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_341()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_450() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_449()) return true;
    return false;
  }

  private boolean jj_3R_446() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_128()) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_454() {
    if (jj_3R_458()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_459()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_209()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_457() {
    if (jj_3R_462()) return true;
    return false;
  }

  private boolean jj_3R_445() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_454()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_437() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_447()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_462() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_468()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) return true;
    }
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_72()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(86)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_449() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_457()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_455() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_440() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_449()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_450()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_319()) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(DOUBLE_FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_447() {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_455()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_scan_token(LONG_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_436() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_445()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_446()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_268() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_438() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) return true;
    }
    return false;
  }

  private boolean jj_3R_435() {
    if (jj_3R_440()) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_3R_319()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_320()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_308()) return true;
    return false;
  }

  private boolean jj_3R_428() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_435()) jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    if (jj_3R_436()) return true;
    xsp = jj_scanpos;
    if (jj_3R_437()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_438()) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_470() {
    if (jj_3R_479()) return true;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_127()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_452() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_442() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_452()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    return false;
  }

  private boolean jj_3R_451() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_441() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_451()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_432() {
    if (jj_3R_442()) return true;
    return false;
  }

  private boolean jj_3R_431() {
    if (jj_3R_441()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_430() {
    if (jj_3R_440()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_434() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_433()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_3R_337()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_430()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_431()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_432()) jj_scanpos = xsp;
    if (jj_3R_416()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_298()) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_297()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_101()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    return false;
  }

  private boolean jj_3_106() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((MyToken)getToken(1)).realKind == RSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_179()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    return false;
  }

  private boolean jj_3_104() {
    if (jj_3R_131()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_154()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_467() {
    if (jj_3R_131()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_470()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_444() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_466() {
    if (jj_3R_429()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((MyToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_180()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_465() {
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_464() {
    if (jj_3R_427()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = ClassLiteralLookahead();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(CATCH)) return true;
    return false;
  }

  private boolean jj_3R_460() {
    if (jj_3R_141()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_464()) {
    jj_scanpos = xsp;
    if (jj_3R_465()) {
    jj_scanpos = xsp;
    if (jj_3R_466()) {
    jj_scanpos = xsp;
    if (jj_3R_467()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_456() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_460()) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    return false;
  }

  private boolean jj_3R_448() {
    if (jj_3R_456()) return true;
    return false;
  }

  private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_453() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_439() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_448()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(TRY)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_429() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_439()) return true;
    return false;
  }

  private boolean jj_3R_469() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_443() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_453()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_463() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_469()) return true;
    }
    return false;
  }

  private boolean jj_3R_433() {
    if (jj_3R_443()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_444()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_427() {
    if (jj_3R_131()) return true;
    if (jj_3R_433()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_434()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_458() {
    if (jj_3R_141()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_463()) jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    if (jj_3R_443()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_485() {
    if (jj_3R_490()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(THROW)) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_478() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_477() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_458()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_223()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_477()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_478()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_494() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_345()) return true;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_476() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_295() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_473() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_316()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_476()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_484() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) return true;
    }
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_490() {
    if (jj_3R_493()) return true;
    return false;
  }

  private boolean jj_3_103() {
    if (jj_3R_141()) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_493() {
    if (jj_3R_345()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_494()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_492() {
    if (jj_3R_493()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_3R_141()) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_491() {
    if (jj_3R_315()) return true;
    return false;
  }

  private boolean jj_3R_489() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_491()) {
    jj_scanpos = xsp;
    if (jj_3R_492()) return true;
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_483() {
    if (jj_3R_489()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_475() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_483()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_484()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_485()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_474() {
    if (jj_3R_141()) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_101()) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_474()) {
    jj_scanpos = xsp;
    if (jj_3R_475()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_316()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_482() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_316()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_316()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_316()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_473()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_181() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    return false;
  }

  private boolean jj_3R_488() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_487() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_481() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_487()) {
    jj_scanpos = xsp;
    if (jj_3R_488()) return true;
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_472() {
    if (jj_3R_481()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_482()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(METACLASS)) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_472()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_471() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) return true;
    }
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_5() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) return true;
    }
    return false;
  }

  private boolean jj_3R_256() {
    Token xsp;
    if (jj_3_22()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_486() {
    if (jj_3R_128()) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_480() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_3R_486()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_3R_368()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_480()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_3R_367()) return true;
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3R_345() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_360()) {
    jj_scanpos = xsp;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_21() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    return false;
  }

  private boolean jj_3R_392() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_399()) {
    jj_scanpos = xsp;
    if (jj_3R_400()) return true;
    }
    return false;
  }

  private boolean jj_3R_389() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) {
    jj_scanpos = xsp;
    if (jj_3R_393()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = LocalVariableDeclarationLookaheadWithoutEnv( );
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3_65()) return true;
    }
    return false;
  }

  private boolean jj_3_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_316()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_129()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_471()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_3R_389()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_66() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_123()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_124()) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_3R_356()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_3R_355()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_3R_354()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_3R_353()) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_3R_352()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_350()) return true;
    return false;
  }

  private boolean jj_3R_461() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_433()) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_3R_385()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_349()) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_3R_347()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_3R_346()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_3R_345()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_3R_344()) return true;
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_316() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) {
    jj_scanpos = xsp;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) {
    jj_scanpos = xsp;
    if (jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_3R_330()) {
    jj_scanpos = xsp;
    if (jj_3R_331()) {
    jj_scanpos = xsp;
    if (jj_3R_332()) {
    jj_scanpos = xsp;
    if (jj_3R_333()) {
    jj_scanpos = xsp;
    if (jj_3R_334()) {
    jj_scanpos = xsp;
    if (jj_3R_335()) {
    jj_scanpos = xsp;
    if (jj_3R_336()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_101() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_3R_374()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_3R_370()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_3R_364()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_3R_141()) return true;
    if (jj_3R_131()) return true;
    if (jj_3R_433()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_461()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_99() {
    if (jj_3R_141()) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_3R_358()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_316()) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_3R_315()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_283() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_304()) {
    jj_scanpos = xsp;
    if (jj_3R_305()) {
    jj_scanpos = xsp;
    if (jj_3R_306()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_260()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_3R_131()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_3R_342()) return true;
    return false;
  }

  private boolean jj_3R_426() {
    if (jj_3R_429()) return true;
    return false;
  }

  private boolean jj_3R_425() {
    if (jj_3R_428()) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_424() {
    if (jj_3R_427()) return true;
    return false;
  }

  private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    return false;
  }

  private boolean jj_3_96() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_423() {
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    return false;
  }

  private boolean jj_3_91() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_422() {
    if (jj_3R_141()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_423()) {
    jj_scanpos = xsp;
    if (jj_3R_424()) {
    jj_scanpos = xsp;
    if (jj_3R_425()) {
    jj_scanpos = xsp;
    if (jj_3R_426()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_3R_321()) return true;
    return false;
  }

  private boolean jj_3R_421() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3R_422()) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_98() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_418() {
    if (jj_3R_421()) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  private boolean jj_3R_416() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_418()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_309()) return true;
    return false;
  }

  private boolean jj_3R_413() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_420() {
    if (jj_3R_138()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_414() {
    if (jj_3R_416()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_420()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_3R_285()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = AssignmentLookahead();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3_58()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_419() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_417() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_415() {
    Token xsp;
    if (jj_3R_417()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_417()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_412() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3R_415()) return true;
    }
    return false;
  }

  private boolean jj_3_92() {
    Token xsp;
    if (jj_3_90()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_90()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_100()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_134()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_413()) jj_scanpos = xsp;
    if (jj_3R_412()) return true;
    xsp = jj_scanpos;
    if (jj_3R_414()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_118()) return true;
    if (jj_3R_412()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_419()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_282()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_314() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_3R_314()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_302()) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_3R_135()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_3R_134()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_172()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}



class IntAndObj
{
    IntAndObj( int ptr, Object obj ) {
        super();  this.ptr = ptr;  this.obj = obj;
    }
    int ptr;
    Object obj;
}
